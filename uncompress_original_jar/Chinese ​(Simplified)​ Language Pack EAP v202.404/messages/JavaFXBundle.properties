inspection.javafx.color.component.out.of.range.problem=颜色组件必须是介于 0.0 和 1.0 (包含在内)之间的数值
inspection.javafx.default.tag.could.be.removed=可以移除默认属性标签
inspection.javafx.default.tag.unwrap.tag.fix.family.name=解开标签
inspection.javafx.default.tag.unwrap.tag.fix.name=开启 ''{0}''
inspection.javafx.event.handler.ambiguous.problem=事件处理程序名称不明确\: 找到多个匹配的方法
inspection.javafx.event.handler.change.parameter.type=更改事件处理程序方法的参数类型
inspection.javafx.event.handler.create.options.panel=检测具有非 void 返回类型的事件处理程序方法
inspection.javafx.event.handler.incompatible.generic.parameter.problem=事件处理程序参数的泛型参数不兼容\: {0} 无法从 {1} 分配
inspection.javafx.event.handler.incompatible.handler.argument=事件处理程序参数不兼容\: {0} 无法从 {1} 分配
inspection.javafx.event.handler.return.type.problem=事件处理程序的返回类型应为 void
inspection.javafx.redundant.property.values.problem=属性冗余，因为它包含默认值
inspection.javafx.redundant.property.values.redundant.tag.problem=标签冗余，因为它包含默认值
inspection.javafx.unresolved.fx.id.reference.problem=未解析的 fx\:id 引用
inspection.javafx.unused.imports.problem=未使用的导入

javafx.annotator.duplicate.child.added=添加了重复子项
javafx.annotator.page.language.not.specified=未指定页面语言
javafx.annotator.property.is.read.only=属性 ''{0}'' 只读
javafx.annotator.should.be.public=应为 public
javafx.annotator.should.be.public.or.fxml.annotated=应为 public 或用 @FXML 注解
javafx.annotator.value.not.found={0}未找到

javafx.app.dialog.linux.icon=Linux 图标(&L)\:
javafx.app.dialog.mac.icon=Mac 图标(&M)
javafx.app.dialog.windows.icon=Windows 图标(&W)

javafx.application.icons.choose.icons=选择应用程序图标
javafx.application.icons.file.should.be.inside.project.content={0} 图标文件应位于项目内容内
javafx.application.icons.icon.file.should.exist=应存在 {0} 图标文件
javafx.application.icons.select.icon.file.description=选择所生成应用程序的图标文件 (*.{0})\n
javafx.application.icons.select.icon.file.title=选择图标文件

javafx.artifact.properties.editor.application.class=应用程序类(&P)\:
javafx.artifact.properties.editor.application.icon=应用程序图标
javafx.artifact.properties.editor.application.parameters=应用程序参数(&R)\:
javafx.artifact.properties.editor.build.output.level=构建输出级别\:
javafx.artifact.properties.editor.choose.file.run.in.browser.description=要在浏览器中运行的所生成的应用程序的参数。
javafx.artifact.properties.editor.choose.file.run.in.browser.title=选择属性文件
javafx.artifact.properties.editor.choose.file.standalone.description=要独立运行的所生成的应用程序的参数。
javafx.artifact.properties.editor.choose.file.standalone.title=选择属性文件
javafx.artifact.properties.editor.choose.html.file.description=在浏览器中运行的应用程序入口点的 HTML 模板
javafx.artifact.properties.editor.choose.html.file.title=选择 HTML 文件
javafx.artifact.properties.editor.convert.css.to.bin.option=css 转换为 bin
javafx.artifact.properties.editor.custom.manifest.attributes=自定义清单属性
javafx.artifact.properties.editor.description=描述\: (&D)
javafx.artifact.properties.editor.edit.attributes.button=编辑属性(&A)
javafx.artifact.properties.editor.edit.certificates.button=编辑证书(&C)
javafx.artifact.properties.editor.edit.custom.manifest.attributes=编辑自定义清单属性
javafx.artifact.properties.editor.edit.icons.button=编辑图标(&N)
javafx.artifact.properties.editor.height=高度(&H)\:
javafx.artifact.properties.editor.html.parameters=HTML 参数(&L)\:
javafx.artifact.properties.editor.html.placeholder.id=HTML 占位符 Id(&O)\:
javafx.artifact.properties.editor.html.template=HTML 模板(&M)\:
javafx.artifact.properties.editor.native.bundle=原生捆绑包(&I)\:
javafx.artifact.properties.editor.signing.option=启用签字(&S)
javafx.artifact.properties.editor.title=&标题\:
javafx.artifact.properties.editor.update.in.background.option=后台更新(&B)
javafx.artifact.properties.editor.vendor=&作者\:
javafx.artifact.properties.editor.version=版本(&E)\:
javafx.artifact.properties.editor.width=宽度(&W)\:

javafx.certificates.dialog.alias.should.be.non.empty.error=别名应非空
javafx.certificates.dialog.choose.certificate.title=选择证书
javafx.certificates.dialog.keystore.file.should.exist.error=应存在 Keystore 文件
javafx.certificates.dialog.passwords.should.be.set.error=应设置密码
javafx.certificates.dialog.path.to.keystore.file.error=应设置 keystore 文件路径
javafx.certificates.dialog.select.file.with.generated.keys=选择包含所生成密钥的文件

javafx.collapse.subtag.to.attribute.intention=将标签 ''{0}'' 折叠到属性
javafx.collapse.subtag.to.attribute.intention.family.name=折叠标签到属性
javafx.create.new.fxml.file.description=创建新的 FXML 文件
javafx.create.new.fxml.file.title=FXML 文件
javafx.edit.certificates.dialog.alias=别名(&A)\:
javafx.edit.certificates.dialog.keypass=Keypass(&E)\:
javafx.edit.certificates.dialog.keystore=Keystore(&Y)\:
javafx.edit.certificates.dialog.self.signed.radio=自签(&S)
javafx.edit.certificates.dialog.signed.by.key.radio=通过密钥签字(&K)
javafx.edit.certificates.dialog.signed.storepass=Storepass(&P)\:
javafx.entry.point.javafx.app=JavaFX 应用程序
javafx.expand.attribute.to.tag.intention=展开 ''{0}'' 到标签
javafx.expand.attribute.to.tag.intention.family.name=展开属性到标签
javafx.failed.to.start.scene.builder.error=启动 SceneBuilder 失败\: {0}
javafx.field.to.property.intention.search.for.usages=搜索 ''{0}'' 的用法
javafx.inject.page.language.intention.family.name=指定页面语言
javafx.preloader.artifact.properties.editor.preloader.class=Preloader 类(&P)\:
javafx.project.sdk.setup.validator.runtime.not.configured.error=未配置 JavaFX 运行时。使用内置 JavaFX 的 JDK，或将 JavaFX 库添加到类路径
javafx.property.rename.handler.error.message=无法重命名内置属性
javafx.property.rename.handler.error.title=无法重命名
javafx.refactoring.property.element.type.name=属性
javafx.root.tag.descriptor.cannot.resolve.class=无法解析类 {0}

javafx.scene.builder.editor.download.scene.builder.kit=下载 Scene Builder Kit
javafx.scene.builder.editor.download.javafx=下载 JavaFX
javafx.scene.builder.editor.failed.to.download.kit.error=下载 Scene Builder Kit 失败
javafx.scene.builder.editor.failed.to.open.file.error=无法打开 Scene Builder 中的文件。
javafx.scene.builder.editor.scene.builder.edit.operation=JavaFX Scene Builder 编辑操作

javafx.settings.configurable.path.to.scenebuilder=SceneBuilder 路径(&P)\:
javafx.settings.configurable.scene.builder.configuration.description=选择 SceneBuilder 可执行文件路径
javafx.settings.configurable.scene.builder.configuration.title=SceneBuilder 配置

javafx.wrap.id.with.fx.define.intention=使用 fx\:define 包装“{0}”
javafx.wrap.with.fx.define.intention.family.name=使用 fx\:define 包装
inspection.java.fx.event.handler.display.name=事件处理程序方法签名问题
inspection.java.fx.color.rgb.display.name=颜色组件超出范围
inspection.java.fx.redundant.property.value.display.name=JavaFX 冗余属性值
inspection.java.fx.unused.imports.display.name=JavaFX 未使用的导入
inspection.java.fx.unresolved.fx.id.reference.display.name=未解析的 fx\:id 属性引用
inspection.java.fx.default.tag.display.name=不必要的默认标签
action.OpenInSceneBuilder.text=在 SceneBuilder 中打开