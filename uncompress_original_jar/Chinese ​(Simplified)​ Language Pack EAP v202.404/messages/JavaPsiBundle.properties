0.is.not.an.identifier=''{0}'' 不是一个标识符.
annotation.name.is.missing=注解特性必须为 'name\=value' 形式
anonymous.class.context.display=匿名在{0}
anonymous.class.derived.display=匿名类派生从{0}
aux.context.display=(在{0})
bound.not.expected=意外绑定
catch.without.try='catch' 没有 'try'
class.context.display={0}在{1}
class.literal.expected=应为 .class
context.type.java.comment=注释
context.type.string=字符串

default.language.level.description=SDK 默认值

# These constants are used from JavaElementKind
# When localizing you may use the parameter #0 which signals the desired grammatical case:
# 0 = nominative case (subject)
# 1 = accusative case (object)
element.abstract_method=abstract 方法
element.annotation=注释
element.class=类
element.constant=常量字段
element.constructor=构造函数
element.enum=枚举
element.enum_constant=枚举常量
element.expression=表达式
element.field=字段
element.initializer=初始化
element.interface=接口
element.local_variable=局部变量
element.method=方法
element.module=模块
element.package=包
element.parameter=参数
element.pattern_variable=模式变量
element.record=记录
element.record_component=记录组件
element.statement=声明
element.unknown=元素
element.variable=变量

else.without.if='else' 没有 'if'
enum.constant.context=枚举常数 ''{0}'' 在 ''{1}''
expected.array.initializer=预期为数组初始值设定项
expected.boolean.expression=预期为布尔表达式
expected.catch.or.finally=应为 'catch' 或 'finally'
expected.class.or.interface=应为 'class' 或 'interface'
expected.class.reference=应为类引用
expected.colon='\:' 预期
expected.comma=',' 预期
expected.comma.or.rparen=预期为 ',' 或 ')'
expected.comma.or.semicolon=应为 ',' 或 ';'
expected.dot='.' 预期
expected.eq='\=' 是预期的
expected.expression=表达式预期
expected.gt='>' 是预期的.
expected.gt.or.comma=应为 '>' 或 ','
expected.identifier=标识符是预期的
expected.identifier.or.type=预期为标识符或类型
expected.lbrace='{' 预期
expected.lbrace.or.semicolon=应为 '{' 或 ';'
expected.lbracket='[' 预期
expected.lparen='(' 是预期的
expected.lparen.or.lbracket=预期为 '(' 或 '['
expected.lt.or.lparen=应为 '<' 或 '('
expected.module.declaration=应为模块声明
expected.module.statement=应为模块指令
expected.package.reference=应为包引用
expected.parameter=预期为参数
expected.rbrace='}' 预期
expected.rbracket=']' 预期
expected.resource=应为资源定义
expected.rparen=')' 是预期的
expected.semicolon=';' 是预期的
expected.statement=预期为语句
expected.string=应为字符串文字
expected.switch.label=预期为 'case'、'default' 或 '}'
expected.switch.rule=预期为表达式、块或抛出语句
expected.type=应为类型
expected.type.parameter=应为类型参数
expected.value=值是预期的
expected.while=预期为 'while'
expected.with=应为 'with'
filetype.description.class=Java类文件
filetype.description.java=Java
filetype.description.jshell=JShell snippet files
finally.without.try='finally' 没有 'try'
import.statement.identifier.or.asterisk.expected.=应为标识符或 '*'

java.terms.anonymous.class=匿名类
java.terms.anonymous.class.base.ref=匿名 {0}
java.terms.class=类
java.terms.field=字段
java.terms.interface=接口
java.terms.method=方法
java.terms.package=包
java.terms.parameter=参数
java.terms.variable=变量
javadoc.exception.tag.class.is.not.throwable=类 {0} 不是 Throwable 的后代
javadoc.exception.tag.exception.is.not.thrown={0} 未被声明为由方法 {1} 引发
javadoc.exception.tag.wrong.tag.value=标签值错误
javadoc.param.tag.parameter.name.expected=应为参数名称
javadoc.param.tag.type.parameter.gt.expected='>' 预期
javadoc.param.tag.type.parameter.name.expected=应为类型参数名称
javadoc.ref.tag.class.ref.expected=应为类引用
javadoc.value.field.required=@value 标记必须引用字段
javadoc.value.field.with.initializer.required=@value 标记必须引用具有常量初始值设定项的字段
javadoc.value.static.field.required=@value 标记必须引用 static 字段
javadoc.value.tag.jdk15.required=使用 JDK 1.4 或更早版本时，@value 标记可能没有任何参数
jdk.1.3.language.level.description=1.3 - 普通旧 Java
jdk.1.4.language.level.description=1.4 - 'assert' 关键字
jdk.1.5.language.level.description=5.0 - 'enum' keyword, generics, autoboxing etc.
jdk.1.6.language.level.description=6 - 接口中的 @Override
jdk.1.7.language.level.description=7 - 钻石、ARM、多 catch 等
jdk.1.8.language.level.description=8 - lambda、类型参数等
jdk.1.9.language.level.description=9 - 模块、接口中的 private 方法等
jdk.10.language.level.description=10 - 局部变量类型推理
jdk.11.language.level.description=11 - lambda 参数的局部变量语法
jdk.12.language.level.description=12 - 无新语言功能
jdk.13.language.level.description=13 - 无新语言功能
jdk.14.language.level.description=14 - switch 表达式
jdk.14.preview.language.level.description=14 (预览) - 记录、模式、文本块
jdk.15.language.level.description=15 - 文本块
jdk.15.preview.language.level.description=15(预览) - 密封的类型、记录、模式、本地枚举和接口
jdk.X.language.level.description=X - 实验性功能

local.class.preposition=本地
method.context.display={0}() 在 {1}
node.abstract.flag.tooltip=abstract
node.annotation.tooltip=注释
node.anonymous.class.tooltip=匿名类
node.class.tooltip=类
node.enum.tooltip=枚举
node.exception.tooltip=异常
node.field.tooltip=字段
node.final.flag.tooltip=Final
node.interface.tooltip=接口
node.junit.test.tooltip=JUnit测试
node.method.tooltip=方法
node.record.tooltip=录制 (预览功能)
node.runnable.class.tooltip=Runnable类
node.static.flag.tooltip=static
psi.error.attempt.to.edit.class.file=无法修改文件中的已编译元素''{0}''

task.background.title.maven=Maven

unexpected.identifier=意外标识符
unexpected.token=异常的标记
unexpected.tokens=意外令牌
# suppress inspection "UnusedProperty"
visibility.presentation.abstract=abstract
# suppress inspection "UnusedProperty"
visibility.presentation.default=default
# suppress inspection "UnusedProperty"
visibility.presentation.final=final
# suppress inspection "UnusedProperty"
visibility.presentation.native=native
# suppress inspection "UnusedProperty"
visibility.presentation.open=open
# suppress inspection "UnusedProperty"
visibility.presentation.packageLocal=package-private
# suppress inspection "UnusedProperty"
visibility.presentation.private=private
# suppress inspection "UnusedProperty"
visibility.presentation.protected=protected
# suppress inspection "UnusedProperty"
visibility.presentation.public=public
# suppress inspection "UnusedProperty"
visibility.presentation.static=static
# suppress inspection "UnusedProperty"
visibility.presentation.strictfp=strictfp
# suppress inspection "UnusedProperty"
visibility.presentation.synchronized=synchronized
# suppress inspection "UnusedProperty"
visibility.presentation.transient=transient
# suppress inspection "UnusedProperty"
visibility.presentation.transitive=transitive
# suppress inspection "UnusedProperty"
visibility.presentation.volatile=volatile
# suppress inspection "UnusedProperty"
visibility.presentation.sealed=sealed
# suppress inspection "UnusedProperty"
visibility.presentation.non-sealed=non-sealed
error.message.wildcard.not.expected=意外通配符

bad.return.type.in.method.reference=方法引用中存在错误返回类型\: 无法将 {0} 转换为 {1}
bad.return.type.in.lambda.expression=lambda 表达式中存在错误返回类型\: {0} 无法转换为 {1}
bad.return.type.in.lambda.expression1=lambda 表达式中存在错误返回类型\: {0} 无法转换为 void
missing.return.value.lambda=缺少返回值
unexpected.return.value=意外返回值
lambda.body.must.be.a.statement.expression=lambda 主体必须是语句表达式
