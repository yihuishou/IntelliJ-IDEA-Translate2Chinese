code.coverage.is.not.supported=代码覆盖率支持jre 5.0或更高
coverage.button.add.package=添加包
coverage.pattern.filter.editor.choose.package.title=选择包
coverage.view.column.branch=分支, %
coverage.view.column.class=类, %
coverage.view.column.line=行, %
coverage.view.column.method=方法, %
coverage.view.no.coverage=没有覆盖
coverage.view.node.summary={0} 在包 ''{1}'' 中
coverage.view.root.node.summary={0} 在“范围中的所有类”中
coverage.view.text.classes.covered={0}% 类
coverage.view.text.methods.covered={0}% 方法
exclude.coverage.filters.title=要从覆盖率数据中排除的程序包和类
generating.coverage.report=正在生成覆盖率报告…
project.class.files.are.out.of.date=项目类文件已过期。要重新编译吗? 拒绝这样做将导致覆盖率信息不完整
project.is.out.of.date=项目已过期
record.coverage.filters.title=包和类记录覆盖率数据
run.configuration.choose.coverage.runner=选择覆盖率运行程序\:
run.configuration.coverage.sampling=抽样
run.configuration.coverage.tracing=跟踪
run.configuration.enable.coverage.in.test.folders=在测试文件夹中启用覆盖率
run.configuration.track.per.test.coverage=按测试覆盖率跟踪
settings.coverage.java.ignore.empty.private.constructors.of.utility.classes=忽略实用类的空 private 构造函数
settings.coverage.java.ignore.implicitly.declared.default.constructors=忽略隐式声明的默认构造函数
settings.coverage.java.java.coverage=Java 覆盖率
coverage.settings=显示代码覆盖率选项
coverage.settings.menu=覆盖率设置
coverage.settings.group=代码覆盖率选项
coverage.settings.include=指定类和包
coverage.settings.exclude=排除类和包
coverage.settings.runner=指定替代覆盖率运行程序
coverage.settings.tracing=使用跟踪
coverage.settings.test.folders=在测试文件夹中收集覆盖率