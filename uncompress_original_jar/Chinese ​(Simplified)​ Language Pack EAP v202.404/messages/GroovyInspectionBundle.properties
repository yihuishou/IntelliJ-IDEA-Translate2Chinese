# Copyright 2000-2020 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
########################################################################################################################
# Unused imports
########################################################################################################################
unused.import=未使用的导入
optimize.imports=优化导入
optimize.all.imports=优化未使用的导入语句
########################################################################################################################
# Create class fix
########################################################################################################################
dialog.create.class.package.chooser.title=选择目标包
create.directory.command=创建目录
destination.package=目标包\:
dialog.create.class.label.0=创建类 ''{0}''
second.unsafe.call=第二次不安全的调用
call.can.throw.npe=调用链可以抛出 NullPointerException
unused.default.parameter=未使用的默认参数
unused.default.parameter.message=未使用默认参数
unused.default.parameter.fix=移除初始值设定项
unused.assignment.tooltip=未使用参数
unused.variable=未使用变量
variable.can.be.final.tooltip=变量 ''{0}'' 可以为 final
parameter.can.be.final.tooltip=参数 ''{0}'' 可以为 final
equals.between.inconvertible.types.tooltip=<code>{0}</code> 位于 ''{1}'' 和 ''{2}'' 不可转换类型的对象之间
replace.with.operator.message=''{0}'' 可以替换为运算符
replace.with.operator.fix=将 ''{0}'' 替换为运算符
replace.with.operator.double.negation.option=使用双重否定(即 \!\!)
replace.with.operator.compareTo.equality.option=将 'compareTo' 等式替换为等号(即 \=\=)
replace.with.operator.parentheses=如果需要附加括号，则不建议替换为运算符
replace.with.method.message=可以替换为 ''{0}'' 方法调用
replace.with.method.fix=替换为 ''{0}'' 方法
unassigned.access.tooltip=变量 ''{0}'' 可能未分配
no.return.short.name=缺少 return 语句
no.return.message=并非所有执行路径都返回值
create.dynamic.property=创建动态属性
dynamic.property=动态属性
unresolved.type.status=类型 ''{0}'' 未解析
resolved.type.status=类型 ''{0}'' 已解析
no.type.specified=未指定类型
dynamic.element=动态元素
########################################################################################################################
# InspectorGroovy properties
########################################################################################################################
pointless.boolean.problem.descriptor=\#ref 可以简化为 ''{0}'' \#loc
pointless.arithmetic.error.message=\#ref 可以替换为 ''{0}'' \#loc
pointless.boolean.quickfix=简化
Cannot.perform.undo.operation=无法执行撤消操作
Undo.disable=撤消已禁用
type.doesnt.contain.method=类型 ''{0}'' 不能在范围内进行迭代，因为它没有方法 ''{1}''
type.doesnt.implement.comparable=类型 ''{0}'' 未实现 Comparable
add.method=将方法 ''{0}()'' 添加到类 ''{1}''
implement.class=实现{0}
fix.class=修复类 {0}
rtype.cannot.contain.ltype=''{1}'' 不能包含 ''{0}''
new.instance.of.singleton=使用 @groovy.lang.Singleton 注解的类的新实例
replace.new.expression.with.instance.access=替换为实例访问
getter.0.clashes.with.getter.1={0} 与 {1} 冲突
unused.0=未使用的 {0}
remove.0=移除 {0}
replace.postfix.0.with.prefix.0=将后缀 {0} 替换为前缀 {0}
replace.0.with.1=将 {0} 替换为二进制 {1}
category.method.0.cannot.be.applied.to.1=类别方法 ''{0}'' 不能应用于 ''{1}''
local.var.0.is.reassigned=局部变量 ''{0}'' 已重新分配
anonymous.class=匿名类
closure=结束
other.scope=其他范围
method.may.be.static=方法可能为 static
method.may.be.static.option.ignore.trait.methods=忽略特征方法
method.may.be.static.only.private.or.final.option=仅检查 final 或 private 方法
method.may.be.static.ignore.empty.method.option=忽略空方法
ignore.boolean.expressions=忽略布尔检查中未分配的变量
highlight.if.groovy.object.methods.overridden=高亮显示来自重写 invokeMethod()、getProperty() 或 setProperty() 的类的引用
highlight.if.missing.methods.declared=高亮显示来自声明 missingMethod() 或 missingProperty() 的类的引用
gr.package.inspection.check.scripts=检查脚本
java.style.property.access=Java 样式访问器调用
type.customizer.is.not.marked.as.a.resource.file=类型定制器脚本未标记为编译器资源
add.to.resources=添加到资源
add.type.customizer.to.resources=将类型定制器脚本添加到资源
target.0.does.not.exist=目标 ''{0}'' 不存在
target.annotation.is.unused=@Target 未使用
change.lvalue.type=将变量 ''{0}'' 类型更改为 ''{1}''
replace.qualified.name.with.import=Replace with import
comments.count.as.content=注释计为内容
ignore.when.catch.parameter.is.named.ignore.or.ignored=将 catch 参数命名为 ignore 或 ignored 时忽略
no.applicable.signature.found=未找到适用的签名
expected.type.0=应为 ''{0}''，但找到的是 ''{1}''
declare.explicit.implementations.of.trait=声明特征的显式实现
unnecessary.modifier.description=修饰符 ''{0}'' 不必要
unnecessary.modifier.remove=移除不必要的 ''{0}''
unnecessary.def.explicitly.typed.only=仅在显式类型声明中报告
unnecessary.alias.fix=移除不必要的别名
unnecessary.alias.description=别名不必要
unnecessary.semicolon.description=分号不必要
unnecessary.semicolon.fix=移除分号
