# Groups problem inspection
inspection.depends.on.groups.add.as.defined.test.group.fix=将 ''{0}'' 添加为定义的测试组。
inspection.depends.on.groups.defined.groups.panel.title=定义的组(&D)
inspection.depends.on.groups.family.name=TestNG
inspection.depends.on.groups.undefined.group.problem=组 ''{0}'' 未定义。
# "dependsOnMethods" problem inspection
inspection.depends.on.method.duplicated.name.problem=方法名称重复\: {0}
inspection.depends.on.method.unknown.method.problem=方法 ''{0}'' 未知。
inspection.depends.on.method.check=方法 ''{0}'' 不应包含 () 字符。
inspection.depends.on.method.is.not.test=方法 ''{0}'' 不是测试或配置方法。
inspection.depends.on.method.is.not.annotated=方法 ''{0}'' 未使用 @{1} 注解
# Data provider problems inspection
inspection.testng.data.provider.does.not.exist.problem=数据提供程序不存在
inspection.testng.data.provider.need.to.be.static=外类的数据提供程序需要为 static
# Expected exception never thrown in test method body inspection
inspection.testng.expected.exception.never.thrown.problem=从未在 ''{0}()'' 的正文中抛出预期 <code>\#ref</code> \#loc
# Undeclared test inspection
inspection.undeclared.test.create.suite.fix=创建套件
inspection.undeclared.test.problem.descriptor=未声明的测试 ''{0}''
inspection.undeclared.test.register=注册 ''{0}''
inspection.undeclared.test.register.test=注册测试
junit.configuration.test.runner.parameters.label=测试运行参数\:
simplifiable.testng.assertion.display.name=可简化的 TestNG 断言
test.case.can.be.converted.to.testng=TestCase 可以转换为 TestNG
testng.annotate.dialog.title=注释
testng.browse.button.title=TestNG
testng.choose.test.group=选择测试组
testng.configuration.across.module.dependencies.radio=整个模块依赖项(&D)
testng.configuration.class.label=&类
testng.configuration.group.label=&组
testng.configuration.in.single.module.radio=在单个模块中(&S)
testng.configuration.in.whole.project.radio=在整个项目
testng.configuration.jdk.settings.pane=JDK 设置
testng.configuration.listeners.pane=侦听器
testng.configuration.method.label=方法
testng.configuration.output.directory=&输出目录
testng.configuration.package.label=包
testng.configuration.parameters.pane=参数
testng.configuration.pattern.label=模式
testng.configuration.properties.file=属性文件(&P)
testng.configuration.suite.label=套件(&S)
testng.configuration.test.kind.label=测试种类\:
testng.configuration.use.default.reporters.option=使用默认报告者
testng.create.new.method.dialog.title=创建新方法
testng.create.setup.dialog.message=方法 ''{0}'' 已存在，但未注解为 @BeforeMethod。
testng.create.setup.dialog.title=创建 SetUp
testng.entry.point.test.cases=TestNG 测试用例
testng.group.browser.cannot.browse.groups=无法浏览组
testng.group.browser.no.tests.found.in.project=在项目中找不到测试
testng.output.directory.button.title=TestNG
testng.parameters.table.model.name=名称
testng.parameters.table.model.value=值
testng.select.output.directory=选择测试输出目录
testng.select.properties.file=为测试属性选择 .properties 文件
testng.suite.browser.select.suite=选择套件
testng.suite.browser.select.xml.or.yaml.suite.file=请选择 xml 或 yaml 套件文件
testng.util.found.test.class=找到测试类 {0}
testng.util.searching.test.progress.title=正在搜索测试…
testng.util.unable.to.convert=无法转换。
testng.util.will.be.added.to.module.classpath=TestNG 将被添加到模块类路径

action.excludeFromTestNGSuite.text=从套件中排除
action.AddToTestNGSuite.text=添加到临时套件

# Invalid data provider return type inspection
inspection.data.provider.return.type.check=数据提供程序必须返回 {0}
inspection.constant.testNG.assert.argument.display.name=常量 TestNG 断言参数
inspection.testNG.data.provider.display.name=数据提供程序问题
inspection.data.provider.return.type.display.name=数据提供程序返回类型无效
inspection.duplicated.data.provider.names.display.name=数据提供程序名称重复
inspection.misordered.assert.equals.arguments.testNG.display.name=顺序错误的 'assertEquals()' 参数
inspection.asserts.without.messages.testNG.display.name=TestNG 断言上缺少消息
inspection.expected.exception.never.thrown.testNG.display.name=从未在测试方法正文中抛出预期异常
inspection.assert.equals.between.inconvertible.types.testNG.display.name='assertEquals()' 位于不可转换类型的对象之间
inspection.undeclared.tests.display.name=未声明的测试
inspection.groups.testNG.display.name=组问题
inspection.depends.on.method.testNG.display.name='dependsOnMethods' 问题
inspection.convert.javadoc.display.name=TestNG Javadoc 可以转换为注解
inspection.convert.old.annotations.display.name=使用了旧的 TestNG 注解 @Configuration
inspection.junit.testNG.display.name=JUnit 测试可以转换为 TestNG