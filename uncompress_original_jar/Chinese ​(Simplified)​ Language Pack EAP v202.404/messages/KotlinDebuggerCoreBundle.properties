find.inline.calls.task.compute.names=为声明 {0} 计算类名
find.inline.calls.task.cancelled=调试器可以跳过 {0} 的一些执行，因为类名的计算已中断

alternative.sources.notification.title=可用于文件 {0} 的替代源
alternative.sources.notification.disable=关闭

function.breakpoint.tab.title=Kotlin 函数断点
function.breakpoint.initialize=初始化函数断点
function.breakpoint.cancel.emulation=取消模拟

line.breakpoint.tab.title=Kotlin 行断点
line.breakpoint=行断点
line.and.lambda.breakpoint=行和 {0,choice,1\#Lambda|2\#Lambda} 断点

filter.ignore.internal.classes=不要步入 Kotlin 运行时库实现类
variables.disable.coroutine.agent.values=Disable coroutine agent
variables.disable.coroutine.agent.tooltip=Disables coroutine agent for Gradle and Java run configurations

field.watchpoint.tab.title=Kotlin 字段观察点
field.watchpoint.properties.access=字段访问(&A)
field.watchpoint.properties.modification=字段修改器(&M)
field.watchpoint.properties.initialization=字段初始化(&I)
couldn.t.find.0.class=找不到 ''{0}'' 类
process.resumed=恢复进程
stepping.over.inline=单步内联

breakpoint.properties.panel.option.pass.count=合格次数 (&P)\:
breakpoint.properties.panel.option.class.filters=类过滤器 (&L)\:
breakpoint.properties.panel.option.instance.filters=实例筛选器(&I)\:
label.breakpoint.properties.panel.group.conditions=过滤器

label.add.field.breakpoint.dialog.fq.name=一个类的完全限定名称\:
label.add.field.breakpoint.dialog.field.name=字段名\:
