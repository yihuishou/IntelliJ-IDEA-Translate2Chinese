#module type
module.title=IntelliJ 平台插件
module.description=插件模块用于开发基于 <b>IntelliJ 平台</b>的 IDE 的插件。<br>它们提供 <b>IntelliJ 平台插件 SDK </b>和<b>运行配置</b>，用于在 IDE 中运行和调试插件。
plugin.descriptor=IntelliJ 平台插件描述符

group.PluginDeployActions.text=插件部署操作

#Module Editor - Deployment
deployment.title=插件部署
deployment.cleanup=清理 {0} 目录
deployment.directory.location=选择 {0} 目录位置
deployment.view.select=选择 {0}
manifest.settings=清单设置
manifest.selection=选定的 {0} 将包含在得到的分发中
manifest.use.user.defined=使用用户清单\: 
deployment.view.delete=确定删除{0}?
deployment.view.meta-inf.label={0} 路径
suggest.to.delete=是否删除 ''{0}''?
vm.parameters=VM 选项(&V)
program.parameters=程序参数(&P)

#Prepare for deployment action
action.MakeJarAction.text=准备部署
action.MakeAllJarsAction.text=准备所有要部署的插件
select.plugin.modules.title=选择模块
select.plugin.modules.description=选择要准备部署的模块
prepare.for.deployment.common=部署准备
prepare.for.deployment=为部署准备插件模块 ''{0}''
prepare.for.deployment.all=为部署准备所有插件模块
saved.message.common={0} 将保存在所选目录中
saved.message= 模块 ''{1}'' 的 {0, choice, 1\#Zip|2\#JAR} 文件保存至 {2}
success.deployment.message=成功为部署准备插件模块 ''{0}''
success.deployment.message.all=成功为部署准备所有插件

##Idea Sdk
sdk.title=IntelliJ 平台插件 SDK
jdk.specification=请配置 JDK
sandbox.specification=请配置沙盒
sandbox.home=沙盒主页
sandbox.home.label=沙盒主页\: 
sandbox.no.configured=未为 IntelliJ 平台插件 SDK 指定沙盒
sandbox.purpose=浏览文件夹以放置目标 IDE 的配置、系统和插件

#errors
error.occurred=出错
sdk.no.specified=未为插件模块 ''{0}'' 指定 SDK 
sdk.type.incorrect=插件模块 ''{0}'' 的 SDK 类型错误。
sdk.type.incorrect.common=插件模块的 SDK 类型错误
error.file.not.found=找不到文件 
error.file.not.found.message=文件 ''{0}'' 不存在
error.no.plugin.xml=找不到 plugin.xml 文件
error.plugin.xml.readonly=无法处理只读 plugin.xml 文件\: {0}
error.plugin.xml.tag.invalid=<Invalid>
error.cannot.process.plugin.xml=无法处理插件描述符文件\: {0}
error.cannot.create.service.class=无法创建服务类

#run configurations
run.configuration.no.module.specified=未为配置指定插件模块
run.configuration.title=插件
run.configuration.type.description=插件沙盒环境

#Test Data
testdata.create.dialog.title=创建 Testdata 文件
testdata.file.doesn.not.exist=<html>所引用的 testdata 文件 {0} 不存在。是否要创建?</html>
testdata.create.missing.files=创建缺少的文件
testdata.confirm.create.missing.files.dialog.message=将创建以下 testdata 文件\: \n{0}
testdata.searching=搜索 Testdata 文件

#Misc
info.message=信息
new.action.id=操作 ID(&A)\:
new.action.description=描述(&D)\:
new.action.class.name=类名(&C)\:
new.action.text=名称(&N)\:
new.action.add.to.group=添加到组
new.action.group.actions=操作(&I)\:
new.action.group.anchor=定位标记\:
new.action.group.anchor.first=第一个(&F)
new.action.group.anchor.=最后一个(&L)
new.action.group.anchor.before=之前 (&B)
new.action.group.anchor.after=后面(&T)
new.action.group.groups=组(&G)\:
new.action.keyboard.shortcuts=键盘快捷键
new.action.keyboard.first=第一\: 
new.action.keyboard.second=第二\: 
new.action.keyboard.clear=X
new.action.keyboard.clear.tooltip=清除快捷键
new.action.invalid.id=操作 ID 不得为空
new.action.invalid.class.name=操作类名不是有效的 Java 限定名称
new.action.invalid.name=操作名称不得为空
new.action.cannot.create.class=无法创建操作类

command.implement.externalizable=实现可外部化

new.menu.action.text=操作
new.menu.action.description=创建新操作
new.action.error=无法创建操作
new.action.action.name=正在创建新操作\: {0}。{1}
new.action.dialog.title=新操作

action.name.create.new.message.bundle=创建新消息包 ''{0}'' 
error.title.cannot.create.new.message.bundle=无法创建新消息包
action.DevKit.NewMessageBundle.text=消息捆绑包
action.DevKit.NewMessageBundle.description=创建新的消息捆绑包类和相应的属性文件
title.create.new.message.bundle=创建新消息包 '''' 
label.bundle.name=包名称\: 
error.message.do.not.put.bundle.to.impl.module=目前不建议为 .impl 模块创建单独的包，请改为使用相应 API 模块中的包

new.theme.dialog.title=创建新主题
new.theme.dialog.name.text.field.text=名称\:
new.theme.dialog.is.dark.checkbox.text=深色主题
new.theme.dialog.name.empty=主题名称不得为空

theme.choose.color.dialog.title=选择颜色

new.menu.application.component.text=应用程序组件
new.menu.module.component.text=模块组件
new.menu.project.component.text=项目组件

new.service.class.action.name=创建新服务
new.service.dialog.interface=服务接口(&I)\:
new.service.dialog.implementation=服务实现(&M)\:
new.service.dialog.class=服务类(&C)\:
new.service.dialog.separate=分隔接口与实现(&S)
new.service.dialog.invalid.name=服务名称不是有效的 Java 限定名称
new.service.dialog.invalid.interface=服务接口不是有效的 Java 限定名称
new.service.dialog.invalid.implementation=服务实现不是有效的 Java 限定名称

new.application.service.dialog.title=创建应用程序服务
new.project.service.dialog.title=创建项目服务
new.module.service.dialog.title=创建新的模块服务

select.plugin.module.to.patch=选择要修补的插件模块

keyword.extend=扩展
keyword.implement=实现
class.action=操作
class.interface=接口
class.implementation=实现

structure.sort.alphabetically.in.groups=在组中按字母顺序排序

inspections.group.name=插件开发套件
inspections.group.descriptor=插件描述符
inspections.group.description.file=描述文件
inspections.group.code=代码
inspections.plugin.xml.inner.class.must.be.separated.with.dollar=内部类必须用 '$' 分隔
inspections.plugin.xml.plugin.should.have.jetbrains.vendor=作为 IntelliJ IDEA 项目的一部分开发的插件应指定 'JetBrains' 作为其供应商
inspections.plugin.xml.plugin.jetbrains.vendor.no.url=作为 IntelliJ IDEA 项目的一部分开发的插件不应指定  ''{0}'' 作为 url
inspections.plugin.xml.plugin.jetbrains.vendor.no.email=作为 IntelliJ IDEA 项目的一部分开发的插件不应指定电子邮箱
inspections.plugin.xml.plugin.jetbrains.no.version=作为 IntelliJ IDEA 项目的一部分开发的插件不应指定版本
inspections.plugin.xml.plugin.jetbrains.no.idea.version=作为 IntelliJ IDEA 项目的一部分开发的插件不应指定 idea-version，因为构建脚本会自动生成
inspections.plugin.xml.plugin.jetbrains.no.change.notes=作为 IntelliJ IDEA 项目的一部分开发的插件不应指定 change-notes
inspections.plugin.xml.plugin.jetbrains.no.generic.plugin.url=作为 IntelliJ IDEA 项目的一部分开发的插件不应指定泛型插件 url
inspections.plugin.xml.ep.qualifiedName.superfluous=通过 'qualifiedName' 进行了不必要的声明
inspections.plugin.xml.ep.qualifiedName.superfluous.fix=通过 'name' 声明
inspections.plugin.xml.ep.doesnt.have.with=<extensionPoint> 没有<with>标记用于指定类字段的类型
inspections.plugin.xml.ep.both.beanClass.and.interface=<extensionPoint>不能同时指定 'interface' 属性和 'beanClass' 属性
inspections.plugin.xml.ep.missing.beanClass.and.interface=<extensionPoint>必须指定 'interface' 属性或 'beanClass' 属性
inspections.plugin.xml.ep.both.name.and.qualifiedName=<extensionPoint>不能同时指定 'name' 属性和 'qualifiedName' 属性
inspections.plugin.xml.ep.missing.name.and.qualifiedName=<extensionPoint>必须指定 'name' 属性或 'qualifiedName' 属性
inspections.plugin.xml.use.defaultExtensionNs=改为使用 defaultExtensionNs
inspections.plugin.xml.specify.defaultExtensionNs.explicitly=显式指定 defaultExtensionNs\="{0}"
inspections.plugin.xml.invalid.build.number=<html>无效内部版本号 ''{0}'' (<a href\="http\://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/build_number_ranges.html">文档</a>)</html>
inspections.plugin.xml.until.build.use.asterisk.instead.of.big.number=不在 ''until-build'' 中使用 ''{0}''，改用 ''*''
inspections.plugin.xml.until.build.misleading.plain.number=''until-build'' 属性中的纯数字可能会引起误解。''{0}'' 与 ''{0}.0'' 的意义相同，因此该插件不兼容内部版本号 {0}.* 。最好改为指定 ''{1}''。
inspections.plugin.xml.until.build.must.be.greater.than.since.build="until-build" 必须大于 "since-build"
inspections.plugin.xml.dependency.superfluous.optional=多余的声明
inspections.plugin.xml.dependency.specify.config.file=必须指定 'config-file'
inspections.plugin.xml.deprecated.ep=已启用 EP ''{0}''
inspections.plugin.xml.no.need.to.specify.itnReporter=由 JetBrains 开发的插件中的异常会通过 ITNReporter 自动报告，无需显式指定
inspections.plugin.xml.third.party.plugins.must.not.use.itnReporter='com.intellij.diagnostic.ITNReporter' 报告 JetBrains 的内部处理错误，不应将其用于第三方插件
inspections.plugin.xml.deprecated.attribute=已弃用属性 ''{0}'' 
inspections.plugin.xml.deprecated.helpset=Helpset 已不再使用，请改用 'com.intellij.openapi.help.WebHelpProvider' 
inspections.plugin.xml.attribute.not.used.anymore=不再使用属性 ''{0}''
inspections.plugin.xml.anchor.must.have.relative-to-action='anchor' 必须使用 'relative-to-action' 进行指定
inspections.plugin.xml.must.use.after.before.with.relative-to-action=''{0}''|''{1}'' 与 ''relative-to-action'' 必须一起使用
inspections.plugin.xml.skipForDefaultProject.deprecated='skipForDefaultProject' 已弃用； 默认情况下，项目组件不加载到默认项目中
inspections.plugin.xml.invalid.ep.name.description=无效 EP {0} ''{1}''，只能包含拉丁字符、数字和点，不得以点号开头/结尾，每一段必须以小写字母开头，最后一段不得重复先前任何片段
inspections.plugin.xml.invalid.ep.name=名称
inspections.plugin.xml.invalid.ep.qualifiedName=限定名称
inspections.plugin.xml.ignore.classes.title=注册检查忽略类列表\: 
inspections.plugin.xml.add.ignored.class.title=指定要忽略的类
inspections.plugin.xml.plugin.modules.label=多模块插件的模块\: 
inspections.plugin.xml.plugin.modules.description=每行指定单独一个插件中包含的模块名称列表，这些名称以逗号分隔。
inspections.plugin.xml.version.must.be.specified=必须指定 <version>
inspections.plugin.xml.vendor.must.be.specified=必须指定 <vendor>
inspections.plugin.xml.do.not.use.template.text=不使用模板文本 ''{0}''
inspections.plugin.xml.must.not.contain.template.text=不得包含模板文本 ''{0}''
inspections.plugin.xml.value.exceeds.max.length=值超过最大长度 {0}
inspections.plugin.xml.value.must.have.minimum.length=值必须达到最小长度 {0}
inspections.plugin.xml.product.descriptor.invalid.date=日期必须为 YYYYMMDD 整数或占位符(例如__DATE__)
inspections.plugin.xml.product.descriptor.invalid.version=版本必须为整数或占位符(例如__VERSION__)
inspections.plugin.xml.no.plugin.icon.svg.file=<html>插件应提供 ''{0}'' (<a href\="https\://www.jetbrains.org/intellij/sdk/docs/basics/plugin_structure/plugin_icon_file.html">文档</a>)</html>
inspections.plugin.xml.component.interface.class.redundant=冗余标记 'interfaceClass'
inspections.plugin.xml.service.interface.class.redundant=冗余属性 'serviceInterface'
inspections.plugin.xml.duplicated.dependency=依赖项配置文件 ''{0}'' 重复

inspections.registration.problems.name=组件类型不匹配
inspections.registration.problems.option.check.plugin.xml=检查插件描述符 (plugin.xml)
inspections.registration.problems.option.check.java.actions=检查 Java 操作
inspections.registration.problems.option.check.java.code=检查 Java 代码
inspections.registration.problems.quickfix.read-only=''{0}'' 为只读类
inspections.registration.problems.quickfix.create.constructor=插件非参数构造函数

inspections.registration.problems.incompatible.message=根据它在 plugin.xml 中的注册，此类应为 {0} ''{1}''
inspections.registration.problems.abstract=插件组件类不得为 abstract
inspections.registration.problems.missing.noarg.ctor=操作类必须具有无参数的构造函数

inspections.registration.problems.missing.implementation.class=缺少实现类
inspections.registration.problems.cannot.resolve.class=无法解析 {0} 类
inspections.registration.problems.component.incompatible.interface=组件类不可分配给其接口类 ''{0}''
inspections.registration.problems.component.duplicate.interface=不允许多个组件有相同的接口类
inspections.registration.problems.action.incompatible.class=操作类必须扩展 ''{0}''

inspections.component.not.registered.name=组件/操作未注册
inspections.component.not.registered.message={0} 未在 plugin.xml 中注册
inspections.component.not.registered.option.check.actions=检查操作
inspections.component.not.registered.option.ignore.non.public=忽略非 public 类
inspections.component.not.registered.quickfix.family=注册 {0}
inspections.component.not.registered.quickfix.name=注册 {0}
inspections.component.not.registered.quickfix.error=无法注册 {0}

inspections.component.postfix.template.not.found.description.name=后缀模板描述检查器

inspections.presentation.cannot.resolve.icon=无法解析图标 ''{0}''
inspections.plugin.xml.invalid.order.attribute='order' 属性值无效
invalid.order.attribute.part=''order'' 属性值部分无效\: ''{0}''，必须为 ''first''、''last''、''before <id>'' 或 ''after <id>''

inspections.unregistered.named.color=<html><code>*.themeMetadata.json</code> 中未注册命名的颜色键 ''{0}'' (<a href\="https\://www.jetbrains.org/intellij/sdk/docs/reference_guide/ui_themes/themes_metadata.html">文档</a>)</html>

ant.build.jar.comment=为插件 ''{0}'' 构建存档
ant.build.jar.description=为模块 ''{0}'' 构建插件存档
no.java.sdk.for.idea.sdk.found=找不到合适的 Java SDK 版本。除了 IntelliJ 平台插件 SDK，还需要定义具有相同 Java 版本 ({0}) 的 JDK。
no.idea.sdk.version.found=未能检测出 IntelliJ 平台插件 SDK 所需的 JDK 版本。
error.cannot.resolve.plugin=无法解析插件 {0}
create.description.file=插件描述文件 {0}
create.description.file.family.name=插件描述文件
select.target.location.of.description=选择 {0} 的目标位置
implemented.at.runtime.dom=在运行时实现的 DOM 元素
implemented.at.runtime.jamElement=在运行时实现的 JAM 元素

line.marker.tooltip.extension.declaration=<a href\="\#navigation/{0}\:{1}">{2}</a> 声明位于 {3} 中
line.marker.tooltip.extension.point.declaration=<a href\="\#navigation/{0}\:{1}">{2}</a> EP 声明位于 {3} 中
inspections.usage.uelement.as.psi=不建议将 UElement 用作 PsiElement

inspections.missing.recent.api.common.message=''{0}'' 仅从 {1} 开始方可用，但该模块的目标是 {2}。这可能导致与 {1} 之前的 IDE 出现兼容性问题。
inspections.missing.recent.api.class.message=''{0}'' 仅从 {1} 开始方可用，但该模块的目标是 {2}。这可能导致与 {1} 之前的 IDE 出现兼容性问题。请注意，在以前的 IDE 中，此类型可能具有其他完全限定名称。
inspections.missing.recent.api.method.message=''{0}'' 仅从 {1} 开始方可用，但该模块的目标是 {2}。这可能导致与 {1} 之前的 IDE 出现兼容性问题。请注意，在以前的 IDE 中，此方法可能具有不同的完全签名。
inspections.missing.recent.api.field.message=''{0}'' 仅从 {1} 开始方可用，但该模块的目标是 {2}。这可能导致与 {1} 之前的 IDE 出现兼容性问题。请注意，在以前的 IDE 中，此字段可能具有不同的完全签名。
inspections.missing.recent.api.default.constructor.message=''{0}'' 的默认构造函数仅从 {1} 开始方可用，但该模块的目标是 {2}。这可能导致与 {1} 之前的 IDE 出现兼容性问题。
inspections.missing.recent.api.overriding=''{0}'' 的覆盖方法仅从 {1} 开始方可用，但该模块的目标是 {2}。这可能导致与 {1} 之前的 IDE 出现兼容性问题。请注意，在以前的 IDE 中，此覆盖方法可能具有不同的签名。

inspection.renamer.dialog.title=重命名检查描述文件并更改短名称
inspection.renamer.option.name=重命名检查描述文件并更改短名称
inspection.renamer.dialog.description=<html>您还想重命名检查描述文件并更改短名称吗?<br/><b>警告\: 它可能会破坏现有的检查配置文件和禁止注释。</b></html>
inspection.renamer.entity.name=元素

intellij.api.annotations.update.title=更新 IntelliJ API 注释 {0}
intellij.api.annotations.update.confirmation.content=用于验证 {0} 的 API 用法的<html>检查需要更新外部注释，该注释将从 Maven 存储库下载。<br><br>您是否要在插件开发过程中更新这些注释以提供其他 IDE 辅助?</html>
intellij.api.annotations.update.confirmation.update.button=更新
intellij.api.annotations.update.confirmation.disable.inspection.button=禁用检查
intellij.api.annotations.update.successfully.updated={0} 的 IntelliJ API 外部注释已成功更新。
intellij.api.annotations.update.successfully.updated.but.not.latest.version={0} 的 IntelliJ API 外部注释已更新至 {1} 版本，也即 Maven 存储库中的最新版本。{0} 的注释可能尚未发布。建议您日后再更新注释。
intellij.api.annotations.update.failed=无法更新 IntelliJ API 外部注释\: {0}
intellij.api.annotations.update.failed.no.annotations.found=在 Maven 存储库中找不到 {0} 的外部注释。

inspections.plugin.xml.i18n.name=提取 i18n 的文本/说明
inspections.plugin.xml.i18n.inspection.tag.family.name=提取 i18n 的 displayName
inspections.plugin.xml.i18n.choose.bundle.4inspections.title=选择捆绑包
inspections.plugin.xml.i18n.key=提取 i18n 的键

line.marker.related.property.title=相关属性
line.marker.related.property.description=相关属性

action.DevKit.EditThemeEditorColorScheme.text=编辑编辑器配色方案
action.DevKit.RollbackTheme.text=停止主题预览
action.DevKit.ApplyTheme.text=预览主题
action.DevKit.OpenThemeReferenceDocs.text=打开 UI 主题参考文档
action.AnalyzeEPUsageIgnoreSafeClasses.text=分析 EP 用法（不遵循安全类型）
action.AnalyzeEPUsage.text=分析 EP 用法
action.AnalyzeUnloadablePlugins.text=分析可卸载插件
action.DumpCleanTestData.text=转储 Highlighting-Markup-Free 数据
action.TestData.Navigate.text=导航到测试数据
action.ShowHelpPageById.text=按 ID 显示帮助页面
action.GenerateDomModel.text=生成 DOM 模型...
action.ShowSerializedXml.text=显示类的序列化 XML
action.ShuffleNamesAction.text=打乱名称次序/搅乱名称/匿名/改变名称序列
action.ToggleHighlightingMarkup.text=切换预期的高亮显示标记
group.Internal.DevKit.text=DevKit
action.GenerateExternalization.text=生成外部化
action.DevKit.NewTheme.text=主题
action.NewModuleService.text=模块服务
action.NewModuleService.description=创建新的模块服务
action.NewProjectService.text=项目服务
action.NewProjectService.description=创建新的项目服务
action.NewApplicationService.text=应用程序服务
action.NewApplicationService.description=创建新的应用程序服务
action.NewAction.text=操作
action.NewAction.description=创建新操作
group.DevkitNewActions.text=插件开发套件
action.Anonymous.text.choose.color=选择颜色...
inspection.serializable.constructor.message=非默认 ctor 应当用 @PropertyMapping 进行注释