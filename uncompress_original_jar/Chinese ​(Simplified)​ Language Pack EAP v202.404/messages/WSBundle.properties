axis2.path.tooltip=Axis2 安装路径

webservice.url.tooltip=wsdl 文档的网址
webservice.browse.tooltip=浏览本地文件
webservice.user.tooltip=用于访问 wsdl url 的用户名(如果受密码保护)
webservice.password.tooltip=用于访问 wsdl url 的用户密码(如果受密码保护)

webservice.webmethod=Web 方法
webservice.packageprefix=包前缀\:
webservice.outputpath=输出目录\:
webservice.platform=服务平台\:
webservice.namespace=服务命名空间\:
webservice.name=服务名称\:
webservice.web.module=目标 Web 模块\:
webservice.url=服务 URL\:
webservice.outputpath.tooltip=所生成代码的输出路径，此模块的源根目录之一
webservice.packageprefix.tooltip=所生成代码的包前缀
webservice.generateastestcase.tooltip=生成用于访问此服务的 JUnit 测试用例
webservice.addrequiredlibs.tooltip=添加必要的库，以使所生成的代码得到编译和发挥作用

webservice.wstoolkit.tooltip=要使用的 Web 服务工具包
webservice.status.tooltip=当前设置的状态,输入错误,等等
webservice.classname.tooltip=类名作为 Web 服务公开
webservice.classname.wsdl.tooltip=用于生成 wsdl 的类名

webservice.platform.tooltip=要使用的 Web 服务引擎的名称
webservice.methodsforoperations.tooltip=要作为 Web 服务端点公开的类的方法
webservice.generate.classes.for.schema.arrays.tooltip=生成架构数组的类，如果未设置，则使用 Java 数组

webservice.typemapping.version.tooltip=所生成的代码使用的类型映射版本，1.1 - SOAP 1.1 JAX-RPC 合规，1.2 - SOAP 1.1 编码
webservice.generateunreferenced.elements.tooltip=即便为未引用的元素也生成 Java 代码
webservice.wrapped.support.tooltip=对所谓的“包装”文档/文字样式操作的特殊处理，例如默认情况下由 .NET 使用
webservice.soap.action.tooltip=这项运算的 soapAction 字段的值。OPERATION 强制 soapAction 作为运算的名称。DEFAULT 可让 soapAction 根据运算的元数据(通常为 "")进行设置。NONE 则强制 soapAction 为 ""

webservice.binding.style.tooltip=WSDL 中的绑定样式
webservice.deployment.style.tooltip=部署样式 (DOCUMENT/WRAPPED/ENCODED/MESSAGE)
webservice.use.items.binding.tooltip=在绑定中使用项目
webservice.output.mode.tooltip=应生成客户端存根(客户端)或服务器端(服务器)实现框架
webservice.name.of.module.tooltip=用于运算的模块名称
webservice.namespace.tooltip=Web 服务标识命名空间
webservice.monitoring.port.tooltip=在 web.xml 中指定的用于 SOAP 消息监视的端口
webservice.servername.tooltip=用于 Web 服务开发的服务器的名称
webservice.serverport.tooltip=用于 Web 服务开发的服务器端口
webservice.java2wsdl.generatetype.tooltip=生成包含所有/接口/实现元素的 WSDL

jwsdp.path.tooltip=用于 XML Web 服务引用实现/Java Web 服务开发包的 Metro/Glassfish/Java API 路径
xfire.path.tooltip=XFire/Apache CXF (aka XFire 2.0) 安装路径
xml.beans.path.tooltip=XML Bean 安装路径
jaxb.classname.tooltip=用于生成 JAXB 架构的类名
jaxb.include.parameters.return.types.of.methods.tooltips=在 JAXB 生成的架构中包含以下方法的参数和返回类型
jaxb.generate.mark.generated=将生成的代码标记为 @javax.annotation.Generated
jaxb.generate.source.location.support=为生成的代码启用源位置支持
jaxb.generate.sync.methods=使用 'synchronized' 关键字生成访问器方法
jaxb.generate.package.level.annotations=生成 package-info.java 以包含包级别的信息
jaxb.url.tooltip=使用 JAXB 生成的架构(WSDL、DTD)的路径

xmlbeans.url.tooltip=使用 XmlBeans 生成的架构或 WSDL 的路径
jaxb.make.files.readonly.tooltip=将所生成的文件设为只读
jaxb.schema.gen.error=架构生成错误
jaxb.no.jwsdp.path=请在插件设置中指定 JWSDP/Glassfish 路径
jaxb.no.jwsdp.path.jdk6=请在插件设置中指定 JWSDP/Glassfish 路径或使用 JDK 6
jaxb.external.class.error=类 ''{0}'' 不属于某些项目模块
jaxb.no.class.error=未选择类
jaxb.no.methods.selected.error=未选择方法

xfire.binding.tooltip=用于 XML <-> 序列化的绑定
webservice.name.tooltip=要创建的 Web 服务名称
jbossws.path.tooltip=安装了 JBoss WS 的 JBoss 的路径

webservices.deploy.remove.from.descriptor=从 Web 服务部署描述符中移除
webservices.deploy.add.to.descriptor=添加到 Web 服务部署描述符
webservices.deploy.edit.descriptor=编辑 web.xml
webservices.deploy.class.is.not.from.module=所选类不在模块中
webservices.deploy.class.does.not.exist=类不存在
webservices.deploy.error=错误
webservices.deploy.info=信息
webservices.deploy.no.deployed.services=找不到已部署的 Web 服务
webservices.list.header=Web 服务\:
webservices.select.target=选择目标

webservices.inspections.group.name=Web 服务
webservices.inspections.valid.externally.bound.object.display.name=有效的外部绑定对象
webservices.inspections.empty.webservice.display.name=WebService 类为空
websphere.path.tooltip=Web Sphere 安装路径
webservice.url.path.prefix=构造 Web 服务 URL 时在 Web 服务名称前添加的路径

webservices.inspections.oneway.operation.display.name=Oneway Web 服务操作
webservices.inspections.oneway.operation.problem=Oneway Web 方法应没有类型
webservices.inspections.oneway.operation.remove.annotation.fix.name=移除 Oneway 注解
webservices.inspections.oneway.operation.replace.returntype.with.void.fix.name=将返回类型设置为 void
webservices.inspections.nonjaxwswebservices.inspection.display.name=报告非 JAX-WS Web 服务
webservices.inspections.implicitly.exposed.webmethod.inspection.display.name=报告隐式公开的 Web 方法
webservices.inspections.implicitly.exposed.webmethod.inspection.webmethod.problem=Web 方法隐式公开
webservices.inspections.nonjaxwswebservices.inspectionwebservice.problem=非 JAX-WS 注解的 Web 服务
webservices.inspections.nonjaxwswebservices.inspection.annotate.web.service.fix=使用 @WebService 对类进行注解
webservices.inspections.implicitly.exposed.webmethod.inspection.annotate.web.method.fix=使用 @WebMethod 对方法进行注解
webservices.inspections.web.service.without.methods=没有方法的 Web 服务或 XML 映射对象
webservices.inspections.problem=问题\:
webservices.inspections.web.service=Web 服务
webservices.inspections.mapped.object=映射的对象
webservices.inspections.field.should.be.public=字段应为 public
webservices.inspections.no.setter.for.property=属性 ''{0}'' 没有 setter 方法
webservices.inspections.no.engines=未配置引擎。
webservices.inspections.no.engines.default.used=将使用默认 ''{0}''。
webservices.inspections.no.engines.fix=修复
webservices.inspections.no.engines.configure=配置

url.is.empty.validation.problem=Url为空
invalid.number.validation.problem=无效数字
negative.number.validation.problem=负数
result.schema.file.name.is.empty.validation.problem=结果模式文件的名字是空的
generate.schema.from.instance.document.dialog.title=从实例文档生成模式
instance.2.xsd.dialog.title=实例模式

local.elements.global.complex.types.option.name=局部元素/全局复杂类型
local.elements.types.option.name=局部元素/类型
global.elements.local.types.option.name=全局元素/局部类型
select.xml.document.dialog.title=选择 XML 文档
no.class.in.selected.text.editor.error.message=选中的编辑器里没有类
schema.generator.process.title=模式发生器
instance.to.schema.generator.error=实例到模式发生器错误
select.schema.document.dialog.title=选择模式文档
generate.instance.document.from.schema.dialog.title=从模式生成实例文档
any.dialog.status=按状态分组
schema2.instance.no.valid.root.element.name.validation.error=无效的根元素名称
schema2.instance.output.file.name.is.empty.validation.problem=输出文件的名称无效

choose.glassfish.or.jaxws.ri.or.jwsdp.directory.dialog.title=选择 JAX-WS RI、Glassfish、Metro 或 JWSDP 2.0 目录
choose.axis.2.directory.dialog.title=选择 Axis 2 目录
choose.xfire.directory.dialog.title=选择 XFire 或 CXF 目录
choose.xml.beans.directory.dialog.title=选择 XML Beans 目录
choose.jboss.application.server.directory.with.jboss.ws.installed.dialog.title=选择安装了 JBoss WS 的 JBoss Application Server 目录
choose.web.sphere.path.dialog.title=选择 Web Sphere 路径
class.should.not.be.enum.annotation.type.validation.problem=类不应为注解类型
class.should.be.instanciatable.validation.problem=类应当可实例化(具有 public 修饰符和无参 public 构造函数)
class.not.public.or.does.not.allow.instantiation.validation.message=类 {0} 不为 public 或不允许实例化
class.not.found.validation.message=类{0}未找到
method.is.constructor.validation.message=方法为构造函数
method.is.not.public.validation.message=方法不为 public
webservices.facet.config.name=WebServices
webservices.facet.configure.message=请在设置 -> Web 服务中配置特定的框架和库
webservices.support.provider.name=WebServices(&V)
webservices.client.support.provider.name=WebServices 客户端(&C)
enable.web.services.support.lvcslabel=启用 Web 服务支持
nonspecified.webservices.engine.name.validation.message=Web 服务引擎名称无效
class.was.not.recompiled.after.changes.please.compile.before.proceeding.deployment.problem=更改后未重新编译类 {0}，请编译后再继续
select.ws.engine.facet.configuration.name=选择 WS 引擎(&W)
webservices.facet.name=WebServices
webservicesclient.facet.name=WebServices 客户端
choose.wsdl.file.dialog.title=选择 WSDL 文件
file.doesn.t.exist.validation.message=文件{0}不存在
file.0.has.inappropriate.file.type.validation.message=文件 {0} 的文件类型不当
invalid.web.module.selected.validation.message=选择了无效的 Web 模块
show.deployed.web.services.dialog.title=显示部署的 Web 服务
show.deployed.web.services.loading=加载 Web 服务列表
uncomment.soapmonitor.mapping.in.web.xml.validation.message=撤消 web.xml 中 SOAPMonitor 映射的注释
no.web.module.with.web.service.support.configure.one.validation.message=没有支持 Web 服务的 Web 模块 \=> 配置一个
soap.messages.toolwindow.title=Soap 消息
expose.class.as.web.service.dialog.title=类作为 Web 服务公开
unexpose.class.as.web.service.dialog.title=取消将类作为 Web 服务公开
invalid.web.service.class.name.validation.message=无效的 Web 服务类名
invalid.web.service.name.validation.message=无效的 Web 服务名称
use.of.items.deploy.dialog.text=项目使用情况\:
context.name.should.consist.of.alphanumeric.and.letters.only.validation.message=上下文名称应仅由字母数字和字母组成(_L)
the.web.server.0.1.is.not.running.launch.the.webservices.web.module.in.local.tomcat.run.debug.session.or.change.server.port.in.plugin.settings.validation.message=Web 服务器 {0}\:{1} 未运行 \=> 在本地 Tomcat 运行/调试会话中启动 Webservices Web 模块，或在插件设置中更改服务器/端口
nonvalid.context.or.axisservlet.is.not.present.web.service.support.not.enabled.for.module.validation.message=无效的上下文或 AxisServlet 不存在(模块未启用 Web 服务支持)
invalid.url.validation.message=无效 url

generate.wsdl.from.java.dialog.title=从 Java 生成 Wsdl
generate.wsdl.from.java.plugin.error=启动 Java 2 WSDL 时出错，请将异常发送给插件作者
generate.wsdl.from.java.internal.error=内部错误
generate.wsdl.from.java.no.methods.error=未选择方法

invalid.web.service.url.validation.message=无效的 Web 服务 URL
invalid.web.service.namespace.validation.message=无效的 Web 服务命名空间
package.prefix.is.not.valid.validation.message=包前缀无效
expose.class.as.web.service.lvcs.label=类作为 Web 服务公开
create.webservice.action.text=创建 WebService
create.webservice.action.description=创建 JEE WebService
create.webservice.client.action.text=创建 Web 服务客户端
create.webservice.client.name=名称
create.webservice.client.action.description=创建 JEE WebService 客户端
remove.web.service.dialog.title=移除 Web 服务
invalid.web.service.selected.validation.message=选择了无效的 Web 服务

webservice.create.action.name=WebService
webserviceclient.create.action.name=WebServiceClient
webservices.file.templates.group.name=webservices
selected.class.is.not.marked.with.javax.jws.webservice.annotation.validation.message=所选类未使用 javax.jws.WebService 注解进行标记
jaxws.does.not.support.wsdl.generation.from.interface.validation.message=JAX-WS 不支持从接口生成 WSDL
no.targetnamespace.is.specified.validation.message=未指定 targetNamespace 时，JAX-WS 不支持从默认包类生成 WSDL
class.in.default.package.should.have.targetnamespace.specified.validation.message=默认包中的类应指定 targetNamespace

generate.xml.schema.from.java.using.jaxb.dialog.title=使用 JAXB 从 Java 生成 XML 架构
generate.java.xjc.error=XJC 生成错误
generate.java.xjb.select.dir=选择目录或 *.xjb 文件
generate.java.wadl.unsupported=Web 服务引擎不支持 WADL 文件
generate.java.wsdl.connection.error=WSDL URL 连接异常
generate.java.wsdl.package.empty=包不应为空
generate.java.wsdl.path.invalid=WSDL 路径无效
generate.java.code.from.xml.schema.using.jaxb.dialog.title=使用 JAXB 从 XML 架构生成 Java 代码
generate.jaxb.schemas.from.java.lvcs.title=使用 JAXB 从 Java 生成 XML 架构

generate.java.code.from.jaxb.schemas.lvcs.action=使用 JAXB 从 XML 架构生成 Java 代码
generate.java.code.from.xmlbeans.schemas.lvcs.action=使用 Xmlbeans 从 XML 架构生成 Java 代码
generate.java.code.from.xmlbeans.schemas.dialog.title=使用 Xmlbeans 从 XML 架构生成 Java 代码
generate.java.code.from.xmlbeans.select.schema=选择要生成的 XML 模式/WSDL 文件
generate.java.code.from.xmlbeans.invalid.output=输出 JAR 文件名无效
generate.java.code.from.xmlbeans.no.root.tag=无根标签
generate.java.code.from.xmlbeans.no.xml.beans.path=请在插件设置中指定 XmlBeans 路径
generate.java.code.from.xmlbeans.compiler.error=XML Bean 编译器错误

glassfish.jax.ws.2.x.ri.metro.1.x.jwsdp.2.0=Glassfish / JAX-WS 2.2 RI / Metro 1.X / JWSDP 2.2
max.vm.memory.size.when.launching.tools=启动 Web 服务工具时将使用的最大堆内存大小 (Mb)
exception.when.copying.endorsed.jars.message=由于您的项目使用 JDK 6 (捆绑了 JAXB/JAX-WS api)，并且您的设置指定了不同的 JAX-WS 位置，因此 IDEA 尝试将 JAR {0} 复制到 {1} 目录，但出现异常，因此您需要手动复制文件
exception.when.copying.endorsed.jars.title=将 JAR 文件复制到 JDK 的 endorsed 目录时出错

downloading.and.installing.soapui=下载和安装 SoapUI
installation.complete=安装完成
soapui.installation.error=下载和安装 SoapUI 插件 {0} 时出错
soapui.error=错误
install.soapui.plugin=您还想下载并安装 SoapUI 3.0 插件 (~31Mb) 吗?

cant.resolve=无法解析
property.doesnt.exist=属性 ''{0}'' 不存在
field.doesnt.exist=字段 ''{0}'' 不存在
remove=移除属性
ws.intention.action.family.name=Web 服务意图动作
wsdl.inspection.group.name=WSDL

websphere.platform.name=WebSphere 6.X
axis2.display.name=Apache Axis 2
cxf.display.name=CXF
cxf.spring.cannot.resolve.bean=无法解析 Spring Bean ''{0}''

restful.service.display.name=RESTful Web 服务
restful.client.service.display.name=RESTful Web 服务客户端
rest.mime.type=JAX-RS MIME 类型
configurable.WebServicesPluginConfigurable.display.name=Web 服务
settings.external.engines=外部引擎：
settings.jboss.name=JBoss
settings.xml.beans=XML Bean
settings.server.name=服务器名称：
settings.server.port=服务器端口：
settings.prefix.path.for.web.services.url=Web 服务 URL 的前缀路径：
settings.maximum.vm.heap.size.when.launching.tools.mb=启动工具时的最大虚拟机堆大小 (Mb)：
settings.port.should.be.numeric=端口应为数值
settings.invalid.url=无效 url
settings.directory.not.exists=目录 ''{0}'' 不存在
settings.engine.not.configured=未配置 Web 服务引擎

group.XmlBeans.text=Xml Bean(_B)
group.XmlBeans.description=XmlBeans 操作
group.JAXB.text=JAXB(_X)
group.JAXB.description=JAXB 操作
group.AxisActions.text=轴(_A)
group.AxisActions.description=特定于轴的操作
group.WebServicesActions.text=WebServices(_W)
group.WebServicesActions.description=Web 服务操作

action.WebServicesPlugin.MonitorSoapMessages.text=监视 SOAP 消息
action.WebServicesPlugin.ShowDeployedWebServices.text=显示部署的 Web 服务
action.WebServicesPlugin.GenerateJavaFromXmlBeansSchemas.text=使用 Xmlbeans 从 XML 架构生成 Java 代码...
action.WebServicesPlugin.GenerateJavaFromJAXBSchemas.text=使用 JAXB 从 XML 架构生成 Java 代码...
action.WebServicesPlugin.GenerateJAXBSchemasFromJava.text=使用 JAXB 从 Java 生成 XML 架构...
action.WebServicesPlugin.CreateWebServiceClient.text=Web 服务客户端
action.WebServicesPlugin.GenerateWsdlFromJava.text=从 Java 代码生成 Wsdl...
action.WebServicesPlugin.GenerateJavaFromWsdl.text=从 Wsdl 生成 Java 代码...
action.WebServicesPlugin.CreateWebService.text=Web 服务

axis.monitor.title=SOAP 监视器筛选器
axis.monitor.start=启动
axis.monitor.ok=确定
axis.monitor.cancel=取消
axis.monitor.stop=停止
axis.monitor.add=添加
axis.monitor.remove=移除
axis.monitor.remove.all=全部移除
axis.monitor.switch.layout=切换布局
axis.monitor.reflow.xml=回流 XML 文本
axis.monitor.filter.options=过滤 ...
axis.monitor.filter.by.status=基于状态筛选消息\:
axis.monitor.filter.active.only=仅活动消息
axis.monitor.filter.complete.only=仅完成消息
axis.monitor.time=时间\:
axis.monitor.status=按状态分组\:
axis.monitor.target.service=目标服务\:
axis.monitor.soap.request=SOAP 请求
axis.monitor.soap.response=SOAP 响应

deploy.dialog.add.required.engine=将所需的 Web 服务引擎库添加到类路径
deploy.dialog.service.style=服务样式
deploy.dialog.service.classname=服务类名
deploy.dialog.target.module=目标模块
deploy.dialog.undefined.class=*未定义*

generate.java.jaxb.dialog.enable.src.support=启用源位置支持(&E)
generate.java.jaxb.dialog.add.external.binding=添加外部绑定文件/目录
generate.java.jaxb.dialog.add.libs=添加必要的库
generate.java.jaxb.dialog.no.header=不生成标头(&H)
generate.java.jaxb.dialog.package.annotations=生成包级注解(&P)
generate.java.jaxb.dialog.mark.generated=使用 'generated' 注解标记生成的代码(&G)
generate.java.jaxb.dialog.gen.synchronized=生成同步访问器(&Y)
generate.java.jaxb.dialog.make.readonly=将所生成的文件设为只读(&R)
generate.java.jaxb.dialog.schema.path=架构/WSDL/DTD 路径

generate.java.wsdl.dialog.service.wsdl.url=Web 服务 WSDL URL\:
generate.java.wsdl.dialog.username=用户名\:
generate.java.wsdl.dialog.password=密码\:
generate.java.wsdl.dialog.binding=要使用的绑定\:
generate.java.wsdl.dialog.output.mode=输出模式\:
generate.java.wsdl.dialog.mapping.version=类型映射版本\:
generate.java.wsdl.dialog.allow.extensions=允许扩展
generate.java.wsdl.dialog.allow.extensions.tooltip=允许供应商扩展
generate.java.wsdl.dialog.generate.test=生成 TestCase
generate.java.wsdl.dialog.generate.schema.arrays=为架构数组生成类
generate.java.wsdl.dialog.generate.unreferenced=生成未引用的元素
generate.java.wsdl.dialog.add.libs=添加必要的库，以使所生成的代码得到编译和发挥作用
generate.java.wsdl.dialog.wrapped.style=支持包装的文档/文字样式
generate.java.wsdl.dialog.unwrap=解开文档/文字包装的元素

generate.java.xml.dialog.add.libs=添加必要的库，以使所生成的代码得到编译和发挥作用
generate.java.xml.dialog.schema.path=模式的路径\:

generate.jaxb.schemas.classname=类名\:
generate.jaxb.schemas.include.parameters=包括以下方法的参数和返回类型\:

show.deployed.context.name=上下文名称\:
show.deployed.monitoring.port=监控端口\:

generate.wsdl.binding.style=绑定样式\:
generate.wsdl.class=要生成 WSDL 的类\:
generate.wsdl.soap.action=Soap 操作\:
generate.wsdl.use.items=在绑定中使用项目\:
generate.wsdl.types.version=类型映射版本\:
generate.wsdl.generation.type=生成类型\: