plugin.JSIntentionPowerPack.name        = JSIntentionPowerPack
plugin.JSIntentionPowerPack.description = 添加了 40 多个新的 JavaScript 意图操作。
plugin.test.processing                  = 正在处理意图\: {0}
plugin.test.title                       = 正在测试 JSIntentionPowerPack 插件…
plugin.test.summary                     = {0} 已完成，{1} 失败 ({2} 由于检测， {3} 由于修复)
plugin.intention.untested               = 未测试意图 {0}。

plugin.category.numbers      = JavaScript/数值
plugin.category.boolean      = JavaScript/布尔
plugin.category.conditional  = JavaScript/条件运算符
plugin.category.shift        = JavaScript/移位运算
plugin.category.declaration  = JavaScript/声明
plugin.category.comments     = JavaScript/注释
plugin.category.control-flow = JavaScript/控制流
plugin.category.other        = JavaScript/其他
plugin.category.typescript   = TypeScript
plugin.category.flowjs   = Flow JS
plugin.category.javascript.jsx   = JavaScript/JSX

number.flip-arithmetic-operation.display-name                               = 翻转 {0}
number.flip-arithmetic-operation.family-name                                = 翻转算术运算的操作数

bool.de-morgans-law.display-name.ANDAND                          = 将 \\&\\& 替换为 ||
bool.de-morgans-law.display-name.OROR                            = 将 || 替换为 \\&\\&
bool.de-morgans-law.family-name                                  = 德摩根定律 
bool.flip-comparison.display-name.equals                         = 翻转 {0}
bool.flip-comparison.display-name.not-equals                     = 将 {0} 翻转为 {1}
bool.flip-comparison.display-name.unknown                        = Flip Comparison
bool.flip-comparison.family-name                                 = Flip Comparison
bool.flip-conjunction.display-name                               = 翻转 {0}
bool.flip-conjunction.family-name                                = Flip Conjunction Operands
bool.negate-comparison.display-name.equals                       = 对 {0} 求反
bool.negate-comparison.display-name.not-equals                   = 将 {0} 求反为 {1}
bool.negate-comparison.family-name                               = Negate Comparison
bool.remove-boolean-equality.display-name                        = 简化 {0}
bool.remove-boolean-equality.family-name                         = 移除布尔相等性
braces.add-braces.display-name                                   = 为 {0} 语句添加大括号
braces.add-braces.family-name                                    = 添加大括号
braces.remove-braces.display-name                                = 从 ''{0} 语句中移除大括号
braces.remove-braces.family-name                                 = Remove braces
comment.change-to-cstyle-comment.display-name                    = Replace with Block Comment
comment.change-to-cstyle-comment.family-name                     = Replace with Block Comment
comment.change-to-end-of-line-comment.display-name               = Replace with End Of Line Comment
comment.change-to-end-of-line-comment.family-name                = Replace with End Of Line Comment
comment.move-comment-to-separate-line.display-name               = Move Comment to Separate Line
comment.move-comment-to-separate-line.family-name                = Move Comment to Separate Line
conditional.flip-conditional.display-name                        = 翻转 ?\:
conditional.flip-conditional.family-name                         = Flip Conditional
conditional.flip-if.display-name                                 = 翻转 if-else
conditional.flip-if.family-name                                  = 翻转 if
conditional.replace-conditional-with-if.display-name             = 将 ?\: 替换为 if-else
conditional.replace-conditional-with-if.let.display-name         = 替换为 'let' 并将 ?\: 更改为 if-else
conditional.replace-conditional-with-if.family-name              = 将条件表达式替换为 if-else
constant.constant-expression.display-name                        = Compute Constant Value
constant.constant-expression.family-name                         = Compute Constant Value
constant.constant-subexpression.display-name                     = 计算 {0} {1} {2} 的常量值
constant.constant-subexpression.family-name                      = Compute Constant Value for Subexpression
increment.extract-increment.display-name                         = 提取 {0}
increment.extract-increment.family-name                          = Extract Increment
initialization.merge-declaration-and-initialization.display-name = 合并声明和初始化
initialization.merge-declaration-and-initialization.family-name  = 合并声明和初始化
initialization.split-declaration-and-initialization.display-name = 拆分为声明和初始化
initialization.split-declaration-and-initialization.let.display-name = 替换为 'let'，并拆分为声明和初始化
initialization.split-declaration-and-initialization.family-name  = 拆分声明和初始化
initialization.split-declaration-and-move-to-scope-start.display-name = 拆分为声明和初始化，并移到范围起始处
initialization.split-declaration-and-move-to-scope-start.family-name  = 拆分声明并移到范围起始处

initialization.flow-correct-annotation.family-name = 提供正确的流注释
initialization.flow-correct-annotation.display-name = 提供正确的流注释

initialization.flow-type-explicitly.family-name = 显式指定变量类型
initialization.flow-type-explicitly.display-name  = 显式指定变量类型

loop.merge-parallel-for-loops.display-name                       = 合并 'for' 循环
loop.merge-parallel-for-loops.family-name                        = 合并并行的 for 循环
loop.merge-parallel-for-in-loops.display-name                    = 合并 'for-in' 循环
loop.merge-parallel-for-in-loops.family-name                     = 合并并行的 for-in 循环
number.convert-integer-to-decimal.display-name                   = Convert to Decimal
number.convert-integer-to-decimal.family-name                    = Convert to Decimal
number.convert-integer-to-hex.display-name                       = 转换为十六进制
number.convert-integer-to-hex.family-name                        = Convert to Hexadecimal
number.convert-integer-to-octal.display-name                     = Convert to Octal
number.convert-integer-to-octal.family-name                      = Convert to Octal
number.convert-integer-to-binary.family-name                      = Convert to Binary
number.convert-integer-to-binary.display-name                     = Convert to Binary
number.replace-multiply-with-shift.display-name                  = 将 {0} 替换为 {1}
number.replace-multiply-with-shift.family-name                   = Replace Multiply with Shift
number.replace-shift-with-multiply.display-name                  = 将 {0} 替换为 {1}
number.replace-shift-with-multiply.family-name                   = Replace Shift with Multiply
opassign.replace-with-operator-assignment.display-name           = 将 \= 替换为 {0}\=
opassign.replace-with-operator-assignment.family-name            = Replace Assignment with Operator Assignment
parenthesis.remove-unnecessary-parentheses.display-name          = 移除不必要的括号
parenthesis.remove-unnecessary-parentheses.family-name           = 移除不必要的括号
string.double-to-single-quoted-string.display-name               = 将双引号字符串替换为单引号字符串
string.double-to-single-quoted-string.family-name                = 将双引号字符串替换为单引号字符串
string.join-concatenated-string-literals.display-name            = Join concatenated String literals
string.join-concatenated-string-literals.family-name             = Join concatenated String literals
string.single-to-double-quoted-string.display-name               = 将单引号字符串替换为双引号字符串
string.single-to-double-quoted-string.family-name                = 将单引号字符串替换为双引号字符串
switchtoif.replace-if-with-switch.display-name                   = 将 if 替换为 switch
switchtoif.replace-if-with-switch.family-name                    = 将 if 替换为 switch
switchtoif.replace-switch-with-if.display-name                   = 将 'switch' 替换为 'if'
switchtoif.replace-switch-with-if.family-name                    = Replace Switch with If
trivialif.merge-else-if.display-name                             = 合并 else-if
trivialif.merge-else-if.family-name                              = 合并 else-if
trivialif.merge-if-and.display-name                              = 合并 'if'
trivialif.merge-if-and.family-name                               = 将嵌套 if 合并为 and-ed 条件
trivialif.merge-if-or.display-name                               = 合并 'if'
trivialif.merge-if-or.family-name                                = 将等效的 if 合并为 or-ed 条件
trivialif.merge-parallel-ifs.display-name                        = 合并 'if'
trivialif.merge-parallel-ifs.family-name                         = Merge Parallel Ifs
trivialif.remove-redundant-else.display-name                     = 开启 'else'
trivialif.remove-redundant-else.family-name                      = 解开 else
trivialif.replace-if-with-conditional.display-name               = 将 if-else 替换为 ?\:
trivialif.replace-if-with-conditional.family-name                = 将 if-else 替换为条件表达式
trivialif.split-else-if.display-name                             = 拆分 else-if
trivialif.split-else-if.family-name                              = 拆分 else-if
trivialif.split-if-and.display-name                              = 拆分 and-ed if
trivialif.split-if-and.family-name                               = 将 and-ed 条件拆分为嵌套 if
trivialif.split-if-or.display-name                               = 拆分 or-ed if
trivialif.split-if-or.family-name                                = 将 or-ed 条件拆分为等效 if
jsx.attribute.value.remove.braces.family-name                    = Remove braces
jsx.attribute.value.remove.braces.replace.display-name           = 替换为 ""
jsx.attribute.value.wrap.with.braces.family-name                 = 用 {} 包装值
jsx.attribute.value.wrap.with.braces.replace.display-name        = 替换为 {}

