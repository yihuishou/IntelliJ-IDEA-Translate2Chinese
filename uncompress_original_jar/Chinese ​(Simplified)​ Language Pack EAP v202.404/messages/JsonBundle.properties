json.array=数组
json.object=对象
json.property=属性

syntax.error.missing.closing.quote=缺少右引号
syntax.error.illegal.escape.sequence=非法转义序列
syntax.error.illegal.unicode.escape.sequence=非法 Unicode 转义序列
syntax.error.illegal.floating.point.literal=非法浮点文字
syntax.error.control.char.in.string=字符串文字中不允许使用控制字符 ''{0}''

# Inspections
json.inspection.group=JSON 和 JSON5

inspection.compliance.name=符合 JSON 标准
inspection.compliance5.name=符合 JSON5 标准
inspection.compliance.msg.comments=JSON 标准不允许注释。在解析前，请使用 JSMin 或类似工具移除注释。
inspection.compliance.msg.single.quoted.strings=JSON 标准不允许单引号中的字符串
inspection.compliance.msg.bad.token=JSON 标准不允许此类令牌
inspection.compliance.msg.illegal.property.key=JSON 标准只允许将双引号中的字符串作为属性键
inspection.compliance.msg.trailing.comma=JSON 标准不允许尾随逗号
inspection.compliance.msg.multiple.top.level.values=JSON 标准只允许一个顶层值

inspection.compliance.option.comments=关于注释的警告
inspection.compliance.option.multiple.top.level.values=关于多个顶层值的警告
inspection.compliance.option.trailing.comma=关于尾随逗号的警告
inspection.compliance.option.nan.infinity=关于 NaN 和无穷大/负无穷大数值的警告

inspection.duplicate.keys.name=对象文字中有重复的键
inspection.duplicate.keys.msg.duplicate.keys=对象包含重复键 ''{0}''

# Formatter
formatter.align.properties.caption=对齐

formatter.align.properties.none=不对齐
formatter.align.properties.on.colon=冒号上
formatter.align.properties.on.value=值上

# Quickfixes and editor actions
quickfix.add.double.quotes.desc=使用双引号包装

surround.with.object.literal.desc=对象文字
surround.with.array.literal.desc=数组文字
surround.with.quotes.desc=引用
json.template.context.type=JSON

json.copy.to.clipboard=复制 {0} 到剪贴板

#json schema
json.schema.add.schema.chooser.title=选择 JSON 架构文件
json.schema.annotation.not.allowed.property=不允许属性 ''{0}''
json.schema.conflicting.mappings=警告\: 映射冲突。 <a href\="\#">显示详细信息</a>
json.schema.file.selector.title=架构文件或 URL\:
json.schema.version.selector.title=架构版本\:
json.schema.file.not.found=找不到文件 
json.schema.inspection.compliance.name=符合 JSON 架构
json.schema.inspection.deprecation.name=已弃用 JSON 属性
json.schema.inspection.case.insensitive.enum=枚举值不区分大小写匹配

json.schema.ref.refs.inspection.name=未解析 '$ref' 和 '$schema' 引用
json.schema.ref.file.not.found=文件 ''{0}'' 不存在
json.schema.ref.cannot.resolve.path=无法解析路径 ''{0}''
json.schema.ref.cannot.resolve.id=无法解析 id ''{0}''
json.schema.ref.no.array.element=数组不包含索引为 ''{0}'' 的元素
json.schema.ref.no.property=找不到属性 ''{0}''

settings.json.schema.add.mapping=添加映射
settings.json.schema.edit.mapping=编辑映射
settings.json.schema.remove.mapping=移除映射

json.intention.sort.properties=按字母顺序对属性排序
configurable.JsonSmartKeysConfigurable.display.name=JSON
configurable.JsonSchemaMappingsConfigurable.display.name=JSON 架构映射
configurable.JsonSchemaCatalogConfigurable.display.name=远程 JSON 架构
settings.smart.keys.insert.missing.comma.on.enter=按 Enter 时插入缺失的逗号
settings.smart.keys.insert.missing.comma.after.matching.braces.and.quotes=在匹配的大括号和引号后面插入缺失的逗号
settings.smart.keys.automatically.manage.commas.when.pasting.json.fragments=粘贴 JSON 片段时自动管理逗号
settings.smart.keys.escape.text.on.paste.in.string.literals=在粘贴字符串文字时转义文本
settings.smart.keys.automatically.add.quotes.to.property.names.when.typing.comma=键入 '\:' 时自动向属性名称中添加引号
settings.smart.keys.automatically.add.whitespace.when.typing.comma.after.property.names=在属性名称后面键入 '\:' 时自动添加空格
settings.smart.keys.automatically.move.comma.after.the.property.name.if.typed.inside.quotes=如果在引号内键入，则在属性名称后面自动移动 '\:'
settings.smart.keys.automatically.move.comma.after.the.property.value.or.array.element.if.inside.quotes=如果是在引号中，则在属性值或数组元素后面自动移动逗号
checkbox.use.schemastore.org.json.schema.catalog=使用 schemastore.org JSON 架构目录 
checkbox.allow.downloading.json.schemas.from.remote.sources=允许从远程源下载 JSON 架构
checkbox.always.download.the.most.recent.version.of.schemas=始终下载最新版本的架构
action.DumbAware.JsonSchemaMappingsConfigurable.text.add=添加
action.DumbAware.JsonSchemaMappingsConfigurable.description.add=添加
file.type.description.json=JSON
settings.display.name.json=JSON
copy.json.pointer=复制 JSON 指针
cannot.sort.properties=无法对属性排序
file.is.readonly=文件只读
not.applicable.in.batch.mode=不适用于批处理模式
sorry.this.fix.is.not.available.in.batch.mode=抱歉，此修复在批处理模式下不可用
replace.with.allowed.value=替换为允许的值
json.schema=JSON 架构
json.schema.desc=JSON 架构
remove.prohibited.property=移除被禁属性
add.missing.0=添加缺失的 {0}
add.missing.properties=添加缺失的属性

path.to.file.or.directory.relative.to.project.root.or.file.name=文件或目录相对于项目根的路径，或文件名模式，如 *.config.json
json.property.keys=JSON 属性键
json.string.values=JSON 字符串值
json.vfs.updater.executor=JsonVfsUpdaterExecutor
property.0.is.deprecated.1=属性 ''{0}'' 被弃用\: {1}
add.mapping.for.a=为之添加映射\:
no.schema.mappings.defined=未定义架构映射
file.type.description.json5=JSON5
unnamed.desc=<未命名>
navigate.to.duplicates=导航到重复项
navigate.to.duplicates.header=''{0}'' 的重复项
navigate.to.duplicates.desc=''{0}'' 位于第 \#{1} 行
annotation.property.key=属性键
color.page.attribute.keyword=关键字
color.page.attribute.string=字符串
color.page.attribute.number=数字
color.page.attribute.colon=冒号
color.page.attribute.comma=逗号
color.page.attribute.brackets=方括号
color.page.attribute.braces=大括号
color.page.attribute.block.comment=块注释
color.page.attribute.line.comment=行注释
color.page.attribute.property.key=属性键
color.page.attribute.invalid.escape.sequence=无效转义序列
color.page.attribute.valid.escape.sequence=有效转义序列

qualified.name.qualified=限定名称
qualified.name.pointer=JSON 指针

schema.of.version=JSON 架构版本 {0}

schema.configuration.error.empty.file.path=空文件路径无任何匹配项
schema.configuration.error.empty.pattern=空模式无任何匹配项
schema.configuration.error.unknown.mapping=未知映射类型
schema.configuration.project.directory={0}[项目目录]

schema.configuration.error.empty.path=架构路径为空
schema.configuration.error.invalid.url=无效架构 URL
schema.configuration.error.invalid.url.resource=无效 URL 资源
schema.configuration.error.file.does.not.exist=架构文件不存在
schema.configuration.error.empty.name=架构名称为空
schema.configuration.error.duplicate.name=重复的架构名称\: ''{0}''
schema.configuration.error.conflicting.mappings.title=冲突映射\:\n{0}
schema.configuration.error.conflicting.mappings.desc=''{0}'' 用于架构''{1}''，''{2}'' 用于架构 ''{3}''


schema.configuration.mapping.empty.area.string=选择要查看的 JSON 架构
schema.configuration.mapping.empty.area.alt.string=请添加 JSON 架构文件并配置其用法
schema.configuration.mapping.remote=远程架构 URL

schema.mapping.file=文件
schema.mapping.pattern=文件路径模式
schema.mapping.directory=目录

schema.catalog.hint=将使用 <a href\="http\://schemastore.org/json/">SchemaStore API</a> 下载和分配架构
schema.catalog.remote.hint=始终从 SchemaStore 下载架构，即使其中一些架构与 IDE 捆绑在一起

schema.widget.registered.schemas=已注册的架构
schema.widget.store.schemas=SchemaStore.org 架构
schema.widget.add.mapping=新建架构映射…
schema.widget.edit.mappings=编辑架构映射…
schema.widget.load.mappings=加载 SchemaStore 映射
schema.widget.prefix.json.files=JSON\:
schema.widget.prefix.other.files=架构\: 
schema.widget.display.name=JSON 架构
schema.widget.tooltip.json.files=JSON 架构\: 
schema.widget.tooltip.other.files=由 JSON 架构验证\:
schema.widget.service=JSON 架构服务
schema.widget.conflict.message.prefix=有多个 JSON 架构映射到此文件\:<br/>
schema.widget.conflict.message.postfix=架构 (\!)
schema.widget.download.in.progress.tooltip=已计划下载或正在下载
schema.widget.download.in.progress.label=正在下载 JSON 架构
schema.widget.error.label=JSON 架构错误
schema.widget.error.not.a.schema=文件不是架构
schema.widget.error.cant.download=下载架构出错
schema.widget.bundled.postfix= (已捆绑)
schema.widget.no.schema.label=无 JSON 架构
schema.widget.no.schema.tooltip=未定义 JSON 架构
schema.widget.package.postfix=(包\: ''{0}'')
schema.widget.conflict.popup.title=JSON 架构冲突映射

schema.reader.cant.load.file=无法加载 JSON 架构文件 ''{0}''
schema.reader.cant.load.model=无法加载 JSON 架构文件 ''{0}'' 的代码模型
schema.reader.file.too.large=未从 ''{0}'' 加载 JSON 模式，因为它太大(文件大小为 {1} 字节)
schema.reader.file.empty=未从 ''{0}'' 加载 JSON 架构\: 文件为空
schema.reader.file.not.found.or.error=找不到 JSON 架构或 ''{0}'' 中包含错误\: {1}

schema.documentation.deprecated.postfix= (过时的)

schema.validation.property=属性 {0}
schema.validation.properties=属性 {0}

schema.validation.array.shorter.than=数组短于 {0}
schema.validation.array.longer.than=数组长于 {0}
schema.validation.array.not.contains=\ 'contains' 规则无匹配
schema.validation.array.no.extra=不允许使用其他项目
schema.validation.not.unique=项目非唯一
schema.validation.enum.mismatch=值应为其中之一\: {0}
schema.validation.against.not=根据 'not' 架构进行验证
schema.validation.integer.expected=预期的整数值
schema.validation.number.expected=应为 Double 值
schema.validation.not.multiple.of=不是 {0} 的倍数
schema.validation.greater.than.exclusive.maximum=大于独占最大值 {0}
schema.validation.greater.than.maximum=大于最大值 {0}
schema.validation.less.than.exclusive.minimum=小于独占最小值 {0}
schema.validation.less.than.minimum=小于最小值 {0}
schema.validation.missing.required.property.or.properties=必填的 {0} 缺失
schema.validation.number.of.props.less.than=属性数小于 {0}
schema.validation.number.of.props.greater.than=属性数大于 {0}
schema.validation.violated.dependency=违反依赖关系\: 必须指定 {0}，因为指定了 ''{1}''
schema.validation.string.shorter.than=字符串短于 {0}
schema.validation.string.longer.than=字符串长于 {0}
schema.validation.invalid.string.pattern=由于错误，无法按模式检查字符串\: {0}
schema.validation.string.violates.pattern=字符串违反模式\: ''{0}''
schema.validation.actual=实际\: 
schema.validation.incompatible.types=类型不兼容。
schema.validation.required.one=需要\: {0}。{1}
schema.validation.required.one.of=需要其中一个\: {0}。{1}
schema.validation.to.more.than.one=验证多个变体
schema.validation.one.of.property.sets.required=需要以下属性集之一\: {0}
schema.validation.at.least.one.of.property.sets.required=应至少具有以下属性集之一\: {0}