fork.mode.label=分叉模式(&F)\:
repeat.label=重复(&R)\:

#possible run targets
category.label=分类
change.list.label=变更列表
directory.label=目录
pattern.label=模式
tag.expression.label=标记表达式
uniqueid.label=UniqueId

#actions
action.AddToISuite.text=添加到 JUnit 模式套件
action.excludeFromSuite.text=从套件中排除

unused.declaration.junit.test.entry.point=JUnit 测试用例
test.discovery.by.all.changes.combo.item=所有
module.does.not.exists=模块''{0}''不存在于项目''{1}''
junit.configuration.description=JUnit 测试配置
junit.configuration.class.label=类\:
no.pattern.error.message=未选择模式
default.junit.config.name.whole.project=整个项目
default.junit.config.name.all.in.module=所有在{0}
junit.configuration.method.label=方法\:
default.junit.configuration.name=<无名>
default.junit.config.name.all.in.package.in.module={0}在{1}
junit.configuration.in.single.module.radio=在单一模块
default.package.presentable.name=<默认>
no.test.class.specified.error.text=未指定测试类
directory.not.found.error.message=未找到目录 ''{0}''
junit5.valid.parameterized.configuration.display.name=JUnit 5 格式错误的参数化测试
junit5.malformed.repeated.test.display.name=JUnit 5 格式错误的重复测试
junit5.nested.test.display.name=JUnit 5 格式错误的 @Nested 类
junit5.malformed.nested.class.inspection.description=只有非 static 嵌套类可以用作 @Nested 测试类。
junit5.malformed.repetition.description.injected.for.test=不会为 @Test 方法注入 RepetitionInfo
junit5.malformed.repetition.description.injected.for.each=仅会为 @BeforeEach/@AfterEach 注入 RepetitionInfo，但不会为 {0} 注入
junit5.malformed.repetition.description.injected.for.repeatedtest=仅会为 @RepeatedTest 注入 RepetitionInfo 
junit5.malformed.repetition.description.positive.number=重复次数必须大于零
junit5.malformed.repetition.description.suspicious.combination=可疑的 @Test 和 @RepeatedTest 组合
junit5.malformed.parameterized.inspection.description.method.source.static=方法源 ''{0}'' 必须为 static
junit5.malformed.parameterized.inspection.description.method.source.no.params=方法源 ''{0}'' 不应有参数
junit5.malformed.parameterized.inspection.description.method.source.return.type=方法源 ''{0}'' 必须具有以下返回类型之一\: Stream<?>、Iterator<?>、Iterable<?> 或 Object[]
junit5.malformed.parameterized.inspection.description.method.source.assignable=未找到将 {0} 类型的对象转换为 {1} 的隐式转换
junit5.malformed.parameterized.inspection.description.method.source.unresolved=无法解析目标方法源\: ''{0}''
junit5.malformed.parameterized.inspection.description.duplicated.enum=重复的枚举常量名称
junit5.malformed.parameterized.inspection.description.unresolve.enum=无法解析枚举常量引用。
junit5.malformed.parameterized.inspection.description.wrapped.in.arguments=必须在实参中包装多个参数
junit5.malformed.parameterized.inspection.description.file.source=无法解析文件源\: ''{0}''
junit5.malformed.parameterized.inspection.description.no.value.source.is.defined=未定义值源
junit5.malformed.parameterized.inspection.description.exactly.one.type.of.input.must.be.provided=必须恰好提供一种类型的输入
junit5.malformed.parameterized.inspection.description.suspicious.combination=可疑的 @Test 和参数化源组合
junit5.malformed.parameterized.inspection.description.multiple.parameters.are.not.supported.by.this.source=此源不支持多个参数
junit5.malformed.parameterized.inspection.description.no.sources.are.provided=没有提供源，套件将为空
junit5.malformed.parameterized.inspection.description.suspicious.combination.test.and.parameterizedtest=可疑的 @Test 和 @ParameterizedTest 组合
junit5.malformed.parameterized.fix.text=更改为 {0}
junit5.malformed.parameterized.fix.family.name=替换注解
create.setup.dialog.message=方法 setUp 已存在，但未使用 {0} 注解。是否注解?
junit.configuration.display.name=JUnit
class.isnt.inheritor.of.testcase.error.message={0}没有继承人的TestCase
cannot.browse.test.inheritors.dialog.title=无法浏览TestCase继承器
junit.configuration.package.label=包\:
create.setup.dialog.title=创建 setUp 方法
junit.not.found.in.module.error.message=在模块''{0}''中未找到JUnit
junit.configuration.across.module.dependencies.radio=跨模块依赖项
method.name.not.specified.error.message=未指定方法名称
junit.configuration.search.for.tests.label=搜索测试\:
class.not.test.error.message=类 ''{0}'' 不是测试
configuration.not.specified.message=配置测试类型未指定\: {0}
package.does.not.exist.error.message=包''{0}''不存在
test.method.doesnt.exist.error.message=测试方法''{0}''不存在
junit.configuration.in.whole.project.radio=在整个项目
junit.jar.not.found.in.module.class.path.error.message=junit.jar中没有的模块''{0}''类路径.
all.tests.scope.presentable.text=全部测试