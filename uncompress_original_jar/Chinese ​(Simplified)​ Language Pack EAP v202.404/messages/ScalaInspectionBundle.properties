### META-INF/scala-plugin-common.xml
fileName.does.not.match=类与文件名不相符
method.signature.accessor.empty.parenthesis=类访问器的命名方法为空括号
method.signature.accessor.unit.return.type=类访问器的命名方法具有 Unit 结果类型
method.signature.unit.explicit.type=冗余 Unit 结果类型注解
method.signature.unit.functional.definition=Unit 结果类型的方法具有函数定义
method.signature.unit.parameterless=Unit 结果类型的方法无参数
method.signature.unit.explicit.assignment=冗余赋值
method.signature.procedure.declaration=方法声明中的过程语法
method.signature.procedure.definition=方法定义中的过程语法
method.signature.result.type.refinement=表观结果类型细化; 是否缺少赋值? 
method.signature.parameterless.override.empty.paren=空括号 Scala 方法作为无参数覆盖
method.signature.parameterless.override.java.mutator=Java 更改器方法作为无参数覆盖
method.signature.parameterless.override.mutator.like=类似 Mutator 的命名方法 with 无参数
method.signature.override.abstract.member=使用 override 关键字标记覆盖 abstract 成员的方法
method.signature.empty.paren.override.java.accessor=Java 访问器方法作为空括号覆盖
method.signature.empty.paren.override.parameterless=无参数 Scala 成员作为空括号覆盖
method.signature.parameterless.access.java.mutator=Java 更改器方法作为无参数访问
method.signature.parameterless.access.empty.paren=空括号方法作为无参数访问
method.signature.java.accessor.empty.paren=Java 访问器方法作为空括号调用
typed.parameter.without.parenthesis.in.function.literal=函数文字中无括号的类型化参数
unused.expression.name=未使用的表达式
unreachable.code.name=不可到达的代码
internal.getText.contains.shouldBe.textContains=.getText.contains 应为 .textContains
internal.getText.equals.shouldBe.textMatches=.getText.equals 应为 .textMatches
displayname.scala=Scala
displayname.scala.compile.server=Scala 编译服务器
displayname.scala.compiler=Scala 编译器
displayname.loop.variable.not.updated.inside.loop=循环变量未在循环内更新
displayname.package.name.inspection=包名检查
displayname.scala.deprecation=Scala 弃用
displayname.deprecated.identifier=弃用的标识符
displayname.deprecated.kind.projector.syntax=弃用的 kind-projector 语法
displayname.case.class.parameter=Case 类参数
displayname.var.could.be.a.val='var' 应为 'val'
displayname.unused.symbol=未使用的符号
displayname.default.file.template.inspection=默认文件模板检查
displayname.in.kind.projector.use.correct.lambda.keyword=Kind Projector\: 使用正确的 lambda 关键字
displayname.in.kind.projector.simplify.type=Kind Projector\: 简化类型
displayname.use.of.postfix.method.call=使用后缀方法调用
displayname.advanced.language.features=高级语言功能
displayname.reference.must.be.prefixed=引用必须有前缀
displayname.floating.point.literal.ending.with.dot=浮点文字以 '.' 结尾
displayname.chained.package.clause.inspection=链式包子句检查
displayname.relative.import=相对导入
displayname.suspicious.shadowing.by.a.variable.pattern=变量模式的隐藏可疑
displayname.suspicious.shadowing.by.a.type.parameter=类型参数的隐藏可疑
displayname.abstract.value.in.trait=特征中的抽象值
displayname.unmatched.tag=不匹配的标签
displayname.unnecessary.braces.in.import.inspection=导入检查中有不必要的大括号
displayname.name.boolean.parameters=名称布尔参数
displayname.redundant.cast.inspection=冗余强制转换检查
displayname.redundant.conversion.inspection=冗余转换检查
displayname.missing.type.annotation=缺少类型注解
displayname.malformed.format.string=格式错误的字符串
displayname.legacy.string.formatting=传统字符串格式化
displayname.not.implemented.code=未实现代码
displayname.redundant.block=冗余块
displayname.suspicious.forward.reference=前向引用可疑
displayname.type.annotation.required=必须具备类型注解
displayname.double.negation=双重否定
displayname.simplify.boolean.expression=简化布尔表达式
displayname.trivial.match.can.be.simplified=可以简化普通匹配
displayname.unnecessary.parentheses=不必要的括号
displayname.type.check.can.be.pattern.matching=类型检查可以为模式匹配
displayname.comparing.unrelated.types=比较不相关的类型
displayname.pattern.may.never.match=模式可能从不匹配
displayname.match.statement.convertible.to.pattern.matching.anonymous.function=匹配语句可转换为模式匹配匿名函数
displayname.view.bounds.are.deprecated=视图边界已弃用
displayname.convert.expression.to.single.abstract.method=将表达式转换为单一 abstract 方法(SAM)
displayname.nested.stateful.monads=嵌套的有状态 monad
displayname.field.from.delayedinit=DelayedInit 中的字段
displayname.non.value.field.is.accessed.in.hashcode='hashCode()' 中访问了非值字段
displayname.unnecessary.partial.function=不必要的偏函数
displayname.annotator.based.error.inspection=基于注解器的错误检查
displayname.wrong.platform.method.usage=错误的平台方法用法
displayname.syntactic.sugar=语法糖
displayname.scala.unnecessary.semicolon.inspection=Scala 非必要分号检查
displayname.redundant.return=冗余 return
displayname.anonymous.function.convertible.to.a.method.value=可转换为方法值的匿名函数
displayname.applied.type.lambda.can.be.simplified=可以简化应用类型 Lambda
displayname.redundant.new.on.case.class=case 类中有冗余的 new
displayname.argument.duplicates.corresponding.parameter.default.value=参数复制对应的参数默认值
displayname.auto.tupling=自动编制元组
displayname.concealed.quot.apply.quot.call=已隐藏 "apply" 调用
displayname.null.initializer.can.be.replaced.by.underscore=Null 初始值设定项可以替换为 _
displayname.scala.style.inspection=Scala 样式检查
displayname.simplifiable.empty.check=可简化空度检查
displayname.size.to.length.on.arrays.and.strings=将数组和字符串中的 size 转换为 length
displayname.equals.on.arrays.and.iterators=数组和迭代器中的等号
displayname.sameelements.oncollections.of.a.same.kind=相同种类的 SameElements onCollections
displayname.corresponds.sameelements.on.unsorted.collection=未排序集合中的 Corresponds/sameElements
displayname.equals.oncollections.of.different.kinds=不同种类的 Equals onCollections
displayname.comparing.length.to.lengthcompare=将比较 length 转换为 lengthCompare
displayname.manually.zipping.with.indices=使用索引进行手动压缩
displayname.access.to.first.element.by.index=按索引访问第一个元素
displayname.access.to.last.element.by.index=按索引访问最后一个元素
displayname.constructing.range.for.seq.indices=构建序列索引的范围
displayname.filter.and.headoption.to.find=将 Filter 和 headOption 转换为 find
displayname.find.and.emptiness.check.to.exists=对 exists 执行查找和空度检查
displayname.filter.and.emptiness.check.to.exists.forall=将 Filter 和空度检查转换为 exists/forall
displayname.filter.and.size.to.count=将 Filter 和 size 转换为 count
displayname.find.and.map.to.apply=将 Find 和 map 转换为 apply
displayname.exists.simplifiable.to.contains=Exists 可简化为 contains
displayname.map.and.contains.true.false.to.exists.or.forall=Map 和 contains(true/false) 可简化为 exists 或 \!forall
displayname.filter.and.contains.to.intersect.or.diff=将 filter 和 contains 转换为 intersect 或 diff
displayname.redundant.contains.in.filter=filter 中有冗余的 contains
displayname.double.negation.in.forall.and.exists=forall 和 exists 中的双重否定
displayname.simplifiable.fold.or.reduce.method=可简化 fold 或 reduce 方法
displayname.fold.simplifiable.to.forall=Fold 可简化为 forall
displayname.reverse.and.map.to.reversemap=Reverse 和 map 可简化为 reverseMap
displayname.reverse.and.iterator.to.reverseiterator=Reverse 和 iterator 可简化为 reverseIterator
displayname.conversion.to.set.and.back.to.distinct=转换为 Set，并恢复为 distinct
displayname.drop.and.take.to.slice=将 Drop 和 take 转换为 slice
displayname.reverse.take.and.reverse.to.takeright=Reverse、take 和 reverse 可简化为 takeRight
displayname.map.and.flatten.to.flatmap=Map 和 flatten 可简化为 flatMap
displayname.emulated.headoption.or.lastoption=仿真的 headOption 或 lastOption
displayname.replace.to.with.until=to 替换为 until
displayname.replace.with.flatten=替换为 flatten
displayname.sorted.and.head.last.to.max.min=将 Sorted 和 head/last 转换为 max/min
displayname.collect.and.headoption.to.collectfirst=将 Collect 和 headOption 简化为 collectFirst
displayname.index.bounds.check=索引边界检查
displayname.make.array.to.string=Make Array to String
displayname.get.and.getorelse.to.getorelse=将 Get 和 getOrElse 转换为 getOrElse
displayname.extracting.keys.manually=手动提取键
displayname.extracting.values.manually=手动提取值
displayname.redundant.get.when.getting.a.value.from.map=从 Map 获取值时存在冗余的 get
displayname.lift.to.get=将 Lift 转换为 Get
displayname.emptiness.check.on.get.to.contains=对 Get 和 Contains 执行空度检查
displayname.redundant.headoption.or.lastoption=冗余的 headOption 或 lastOption
displayname.equals.some.x.to.contains.x=Some(x) 等同于 contains(x)
displayname.map.and.getorelse.to.fold=将 Map 和 getOrElse 转换为 fold
displayname.map.and.getorelse.false.to.exists=将 Map 和 getOrElse(false) 转换为 exists
displayname.getorelse.null.to.ornull=将 GetOrElse(null) 转换为 orNull
displayname.emulated.option.x=仿真的 Option(x)
displayname.change.to.filter=更改为 filter
displayname.some.to.option=将 Some 转换为 Option
displayname.filter.after.sort=排序后筛选
displayname.redundant.collection.conversion=冗余的集合转换
displayname.side.effects.in.a.monadic.transformation=monadic 转换的副作用
displayname.unit.return.type.in.the.argument.of.map=map 参数中的 Unit 返回类型
displayname.multiple.arg.lists.in.annotation.constructor=注解构造函数中多个参数列表
displayname.unzip.for.extracting.a.single.element=解压缩以提取单个元素
displayname.tag.unclosed=标签未结束
displayname.inlined.tag=内联标签
displayname.header.tags.unbalanced=标头标签不平衡
displayname.unknown.tag=未知标签
displayname.unknown.parameter=未知参数
displayname.missing.tag.parameter.description=缺少标签参数描述
displayname.wrong.scaladoc.element=错误的 scaladoc 元素
displayname.ammonite.unresolved.import=Ammonite 未解析导入
displayname.specs2.matchers=Specs2 匹配器
final.modifier.is.redundant.for.toplevel.objects='final' modifier is redundant for toplevel objects
mark.inner.case.objects.as.final=Mark inner case objects as final to make compiled class final too

### org/jetbrains/plugins/scala/codeInsight/intention/expression/ConvertParameterToUnderscoreIntention.scala
introduce.implicit.incorrect.order=由于参数顺序错误，不允许引入隐式参数
introduce.implicit.incorrect.count=由于参数的用法计数不正确，因此不允许引入隐式参数
introduce.implicit.not.allowed.here=不允许在此表达式中引入隐式参数

### org/jetbrains/plugins/scala/codeInsight/intention/expression/OptionWithLiteralToSomeIntention.scala
replace.with.some=替换为 Some
replace.option.with.some=Option 替换为 Some

### org/jetbrains/plugins/scala/codeInsight/intention/expression/RemoveApplyIntention.scala
remove.apply.implicit.parameter=不允许移除 ''apply''，因为方法 ''{0}'' 有隐式参数
remove.apply.constructor.implicit.parameter=不允许移除 ''apply''，因为 ''{0}'' 的构造函数中有隐式参数
remove.apply.overloaded=不允许移除 ''apply''，因为方法 ''{0}'' 为重载方法

### org/jetbrains/plugins/scala/codeInspection/SAM/ConvertExpressionToSAMInspection.scala
convert.expression.to.sam=将表达式转换为单一 abstract 方法

### org/jetbrains/plugins/scala/codeInspection/ScalaFileNameInspection.scala
fileName.rename.text={0} {1} 转换为 {2}
fileName.rename.class=重命名类型定义
fileName.rename.file=重命名文件

### org/jetbrains/plugins/scala/codeInspection/annotations/MultipleArgLists.scala
implementation.limitation.multiple.argument.lists=实现限制\: 当前不支持注解中使用多个参数列表

### org/jetbrains/plugins/scala/codeInspection/booleans/DoubleNegationInspection.scala
display.name.double.negation=双重否定
remove.double.negation=移除双重否定

### org/jetbrains/plugins/scala/codeInspection/booleans/SimplifyBooleanInspection.scala
simplify.boolean.expression=简化逻辑表达式
simplify.with.text=简化 {0}

### org/jetbrains/plugins/scala/codeInspection/booleans/SimplifyBooleanMatchInspection.scala
display.name.trivial.match.can.be.simplified=可以简化普通匹配
simplify.match.to.if.statement=将匹配简化为 if 语句

### org/jetbrains/plugins/scala/codeInspection/caseClassParamInspection/CaseClassParamInspection.scala
display.name.case.class.parameter=Case 类参数

### org/jetbrains/plugins/scala/codeInspection/caseClassParamInspection/RemoveValQuickFix.scala
remove.unnecessary.val=移除不必要的 'val'
remove.val.from.definition=移除定义中的 'val'

### org/jetbrains/plugins/scala/codeInspection/cast/ScalaRedundantCastInspection.scala
display.name.redundant.cast=冗余强制转换
remove.redundant.cast=移除冗余强制转换

### org/jetbrains/plugins/scala/codeInspection/cast/ScalaRedundantConversionInspection.scala
display.name.redundant.conversion=冗余转换
remove.redundant.conversion=移除冗余转换
casting.a.to.b.is.redundant=Casting ''{0}'' to ''{1}'' is redundant

### org/jetbrains/plugins/scala/codeInspection/catchAll/DangerousCatchAllInspection.scala
catch.all=指定异常类型

### org/jetbrains/plugins/scala/codeInspection/collections/CollectHeadOptionInspection.scala
replace.collect.headOption.with.collectFirst=将 .collect 和 .headOption 替换为 .collectFirst

### org/jetbrains/plugins/scala/codeInspection/collections/ComparingDiffCollectionKindsInspection.scala
hint.comparing.different.collection.kinds=比较不同的集合种类
hint.convert.left.hand.side.to.collection=左侧转换为 {0}
hint.convert.right.hand.side.to.collection=右侧转换为 {0}

### org/jetbrains/plugins/scala/codeInspection/collections/ComparingLengthInspection.scala
replace.with.lengthCompare=替换为 .lengthCompare

### org/jetbrains/plugins/scala/codeInspection/collections/CorrespondsUnsortedInspection.scala
sameElements.unsorted=未排序的集合中有(或有) `sameElements`，结果不可预测
corresponds.unsorted=未排序的集合有 `corresponds`，结果不可预测

### org/jetbrains/plugins/scala/codeInspection/collections/DropTakeToSliceInspection.scala
replace.drop.take.with.slice=将 .drop 和 .take 替换为 .slice
replace.take.drop.with.slice=将 .take 和 .drop 替换为 .slice

### org/jetbrains/plugins/scala/codeInspection/collections/EmptyCheckInspection.scala
replace.with.isEmpty=替换为 .isEmpty
replace.with.isDefined=替换为 .isDefined
replace.with.nonEmpty=替换为 .nonEmpty

### org/jetbrains/plugins/scala/codeInspection/collections/EmulateFlattenInspection.scala
replace.with.flatten=替换为 .flatten

### org/jetbrains/plugins/scala/codeInspection/collections/EqualityToSameElementsInspection.scala
replace.equals.with.sameElements=将 equals 替换为 sameElements
config.description.for.arrays=对于数组
config.description.for.iterators=对于迭代器

### org/jetbrains/plugins/scala/codeInspection/collections/ExistsEqualsInspection.scala
exists.equals.hint=将 exists 替换为 contains
forall.notEquals.hint=将 forall 替换为 not contains

### org/jetbrains/plugins/scala/codeInspection/collections/ExistsForallReplaceInspection.scala
replace.with.forall=替换为 .forall
replace.with.exists=替换为 .exists

### org/jetbrains/plugins/scala/codeInspection/collections/FilterEmptyCheckInspection.scala
filter.nonempty.check.hint=将 filter 和非空检查替换为 exists
filter.empty.check.hint=将 filter 和空度检查替换为 \!(...).exists
filterNot.empty.check.hint=将 filterNot 和空度检查替换为 forall
filterNot.nonempty.check.hint=将 filterNot 和非空检查替换为 \!(...).forall

### org/jetbrains/plugins/scala/codeInspection/collections/FilterHeadOptionInspection.scala
filter.headOption.hint=将 filter 和 headOption 替换为 find

### org/jetbrains/plugins/scala/codeInspection/collections/FilterOtherContainsInspection.scala
replace.filter.with.intersect=将 filter 和 contains 替换为 intersect
replace.filter.with.diff=将 filter 和 not contains 替换为 diff

### org/jetbrains/plugins/scala/codeInspection/collections/FilterSetContainsInspection.scala
remove.redundant.contains=移除冗余的 .contains

### org/jetbrains/plugins/scala/codeInspection/collections/FilterSizeInspection.scala
filter.size.hint=将 filter 和 size 替换为 count

### org/jetbrains/plugins/scala/codeInspection/collections/FindAndMapToApplyInspection.scala
replace.find.and.map.with.apply=将 find 和 map 替换为 apply

### org/jetbrains/plugins/scala/codeInspection/collections/FindEmptyCheckInspection.scala
find.isDefined.hint=将 find 和非空检查替换为 exists
find.isEmpty.hint=将 find 和空度检查替换为 \!(...).exists

### org/jetbrains/plugins/scala/codeInspection/collections/FoldTrueAndInspection.scala
fold.true.and.hint=将 fold 替换为 forall

### org/jetbrains/plugins/scala/codeInspection/collections/GetGetOrElseInspection.scala
get.getOrElse.hint=替换为 getOrElse(key, defaultValue)

### org/jetbrains/plugins/scala/codeInspection/collections/GetOrElseNullInspection.scala
getOrElse.null.hint=将 getOrElse(null) 替换为 orNull

### org/jetbrains/plugins/scala/codeInspection/collections/HeadOrLastOptionInspection.scala
replace.with.headOption=替换为 .headOption
replace.with.lastOption=替换为 .lastOption
ifstmt.to.headOption=If-else 转换为 headOption
ifstmt.to.lastOption=If-else 转换为 lastOption
lift.to.headOption=将 .lift 转换为 headOption
lift.to.lastOption=将 .lift 转换为 lastOption

### org/jetbrains/plugins/scala/codeInspection/collections/IfElseToFilteredOptionInspection.scala
ifstmt.to.filteredOption=将 if 替换为筛选选项

### org/jetbrains/plugins/scala/codeInspection/collections/IfElseToOptionInspection.scala
hint.replace.with.option.expr=替换为 Option(x)
hint.replace.with.option.expr.with.preview=替换为 Option({0})

### org/jetbrains/plugins/scala/codeInspection/collections/IndexBoundsCheckInspection.scala
ifstmt.to.lift=将 If-else 转换为 lift

### org/jetbrains/plugins/scala/codeInspection/collections/LastIndexToLastInspection.scala
replace.with.last=替换为 .last

### org/jetbrains/plugins/scala/codeInspection/collections/MakeArrayToStringInspection.scala
format.with.mkstring=Format with .mkString("Array(", ", ", ")")

### org/jetbrains/plugins/scala/codeInspection/collections/MapFlattenInspection.scala
replace.map.flatten.with.flatMap=将 .map 和 .flatten 替换为 .flatMap

### org/jetbrains/plugins/scala/codeInspection/collections/MapGetEmptinessCheckInspection.scala
replace.get.nonEmpty.with.contains=替换为 .contains(key)
replace.get.isEmpty.with.not.contains=替换为 \!.contains(key)

### org/jetbrains/plugins/scala/codeInspection/collections/MapGetGetInspection.scala
get.get.hint=替换为 .(key)

### org/jetbrains/plugins/scala/codeInspection/collections/MapGetOrElseBooleanInspection.scala
map.getOrElse.false.hint=将 map 和 getOrElse(false) 替换为 exists
map.getOrElse.true.hint=将 map 和 getOrElse(true) 替换为 forall

### org/jetbrains/plugins/scala/codeInspection/collections/MapGetOrElseInspection.scala
map.getOrElse.hint=将 map 和 getOrElse 替换为 fold

### org/jetbrains/plugins/scala/codeInspection/collections/MapKeysInspection.scala
replace.with.keys=替换为 .keys
replace.with.keySet=替换为 .keySet
replace.with.keysIterator=替换为 .keysIterator

### org/jetbrains/plugins/scala/codeInspection/collections/MapLiftInspection.scala
replace.with.get=替换为 .get

### org/jetbrains/plugins/scala/codeInspection/collections/MapToBooleanContainsInspection.scala
replace.map.contains.true.with.exists=将 .map(...).contains(true) 替换为 .exists(...)
replace.map.contains.false.with.not.forall=将 .map(...).contains(false) 替换为 \! .forall(...)

### org/jetbrains/plugins/scala/codeInspection/collections/MapValuesInspection.scala
replace.with.values=替换为 .values
replace.with.valuesIterator=替换为 .valuesIterator

### org/jetbrains/plugins/scala/codeInspection/collections/OperationOnCollectionInspectionBase.scala
operation.on.collection.id=OperationsOnCollection
operation.on.collection.name=集合中可简化的运算
operation.on.collection.like.option.input.message=在检查中这些类将被视为 scala.Option
operation.on.collection.like.option.input.title=添加类似选项的类
operation.on.collection.like.option.panel.title=类似选项的类
operation.on.collection.like.collection.input.message=在检查中这些类将被视为集合
operation.on.collection.like.collection.input.title=添加类似集合的类
operation.on.collection.like.collection.panel.title=类似集合的类

### org/jetbrains/plugins/scala/codeInspection/collections/OptionEqualsSomeToContainsInspection.scala
replace.with.contains=替换为 .contains
replace.with.not.contains=替换为 \!.contains

### org/jetbrains/plugins/scala/codeInspection/collections/RangeToIndicesInspection.scala
hint.replace.with.indices=替换为 .indices
hint.replace.with.indices.with.preview=替换为 {0}.indices

### org/jetbrains/plugins/scala/codeInspection/collections/RedundantCollectionConversionInspection.scala
redundant.collection.conversion=移除冗余集合转换

### org/jetbrains/plugins/scala/codeInspection/collections/RedundantHeadOrLastOptionInspection.scala
remove.redundant.headOption=移除冗余的 .headOption
remove.redundant.lastOption=移除冗余的 .lastOption

### org/jetbrains/plugins/scala/codeInspection/collections/ReplaceToWithUntilInspection.scala
replace.to.with.until=将 `to` 替换为 `until`

### org/jetbrains/plugins/scala/codeInspection/collections/ReverseIteratorInspection.scala
replace.reverse.iterator=将 .reverse.iterator 替换为 .reverseIterator

### org/jetbrains/plugins/scala/codeInspection/collections/ReverseMapInspection.scala
replace.reverse.map=将 .reverse.map 替换为 .reverseMap

### org/jetbrains/plugins/scala/codeInspection/collections/ReverseTakeReverseInspection.scala
replace.reverse.take.reverse.with.takeRight=将 .reverse.take(...).reverse 替换为 .takeRight(...)

### org/jetbrains/plugins/scala/codeInspection/collections/SameElementsToEqualsInspection.scala
replace.sameElements.with.equals=将 sameElements 替换为 equals
replace.corresponds.with.equals=将 corresponds 替换为 equals

### org/jetbrains/plugins/scala/codeInspection/collections/SideEffectsInMonadicTransformationInspection.scala
side.effects.in.monadic=monadic 转换的副作用

### org/jetbrains/plugins/scala/codeInspection/collections/SimplifiableFoldOrReduceInspection.scala
fold.sum.hint=将 fold 替换为 sum
fold.product.hint=将 fold 替换为 product
fold.sum.short=将 fold 转换为 sum
fold.product.short=将 fold 转换为 product
reduce.sum.hint=将 reduce 替换为 sum
reduce.product.hint=将 reduce 替换为 product
reduce.min.hint=将 reduce 替换为 min
reduce.max.hint=将 reduce 替换为 max
reduce.sum.short=将 reduce 转换为 sum
reduce.product.short=将 reduce 转换为 product
reduce.min.short=将 reduce 转换为 min
reduce.max.short=将 reduce 转换为 max

### org/jetbrains/plugins/scala/codeInspection/collections/SizeToLengthInspection.scala
size.to.length=将数组和字符串中的 .size 替换为 .length

### org/jetbrains/plugins/scala/codeInspection/collections/SomeToOptionInspection.scala
replace.with.option=替换为 Option

### org/jetbrains/plugins/scala/codeInspection/collections/SortFilterInspection.scala
sort.filter.hint=更改排序顺序和筛选

### org/jetbrains/plugins/scala/codeInspection/collections/SortedMaxMinInspection.scala
replace.sorted.head.with.min=替换为 .min
replace.sorted.last.with.max=替换为 .max
replace.sortBy.head.with.minBy=替换为 .minBy
replace.sortBy.last.with.maxBy=替换为 .maxBy

### org/jetbrains/plugins/scala/codeInspection/collections/ToSetAndBackInspection.scala
replace.toSet.and.back.with.distinct=将 Set 的转换替换成 .distinct

### org/jetbrains/plugins/scala/codeInspection/collections/UnitInMapInspection.scala
expression.unit.return.in.map=map 参数中带 unit 返回类型的表达式
use.foreach.instead.of.map=使用 foreach 而不是 map

### org/jetbrains/plugins/scala/codeInspection/collections/UnzipSingleElementInspection.scala
replace.with.map=替换为 .map

### org/jetbrains/plugins/scala/codeInspection/collections/ZeroIndexToHeadInspection.scala
replace.with.head=替换为 .head

### org/jetbrains/plugins/scala/codeInspection/collections/ZipWithIndex.scala
replace.with.zipWithIndex=替换为 zipWithIndex

### org/jetbrains/plugins/scala/codeInspection/controlFlow/ScalaUnreachableCodeInspection.scala
remove.unreachable.code=移除不可到达的代码
unwrap.do.statement=解开 do 语句

### org/jetbrains/plugins/scala/codeInspection/controlFlow/ScalaUnusedExpressionInspection.scala
unused.expression.throws=未使用的表达式，唯一可能的副作用是异常
unused.expression.no.side.effects=未使用的表达式，无副作用
add.return.keyword=添加 return 关键字
remove.expression=移除表达式

### org/jetbrains/plugins/scala/codeInspection/delayedInit/FieldFromDelayedInitInspection.scala
display.name.field.from.delayedinit=DelayedInit 中的字段
field.defined.in.delayedinit.is.likely.to.be.null=在 DelayedInit 中定义的字段可能为 null

### org/jetbrains/plugins/scala/codeInspection/deprecation/DeprecatedKindProjectorSyntaxInspection.scala
replace.with.star.syntax=替换为 `*`-syntax
kind.projector.deprecated.tip=Usage of `?` placeholder is going to be deprecated. Consider using `*` instead.
kind.projector.deprecated.tip.with.update=Usage of `?` placeholder is going to be deprecated. Consider updating kind-projector plugin and using `*` instead.

### org/jetbrains/plugins/scala/codeInspection/deprecation/ScalaDeprecatedIdentifierInspection.scala
usage.of.deprecatedname.as.identifier.is.deprecated=已弃用 {0} 作为标识符的用法。在日后的 scala 版本中或许可以将它用作关键字。

### org/jetbrains/plugins/scala/codeInspection/deprecation/ScalaDeprecationInspection.scala
parameter.name.is.deprecated=参数名称\: {0} 已弃用。
symbol.name.is.deprecated.with.message=符号 {0} 已弃用。{1}
super.method.name.is.deprecated.with.message=Super 方法 {0} 已弃用。{1}

### org/jetbrains/plugins/scala/codeInspection/feature/LanguageFeatureInspection.scala
advanced.language.feature=高级语言功能\: {0}
display.name.advanced.language.features=高级语言功能
import.feature.flag.for.language.feature=导入 ％s 的特性标志
enable.language.feature.plural=启用 {0}

### org/jetbrains/plugins/scala/codeInspection/format/LegacyStringFormattingInspection.scala
legacy.string.formatting.use.interpolated.string=传统字符串格式化，可以改用内插字符串
convert.to.interpolated.string=转换为内插字符串

### org/jetbrains/plugins/scala/codeInspection/format/ScalaMalformedFormatStringInspection.scala
format.specifier.cannot.be.used.for.an.argument=格式说明符 {0} 不能用于参数 {1} ({2})
argument.cannot.be.used.for.a.format.specifier=参数 {0} ({1}) 不能用于格式说明符 {2}
malformed.format.specifier=格式错误的格式说明符
no.argument.for.a.format.specifier=格式说明符 {0} 没有参数
no.argument.at.position={0} 处没有参数
no.format.specifer.for.an.argument=参数 {0} 没有格式说明符

### org/jetbrains/plugins/scala/codeInspection/functionExpressions/MatchToPartialFunctionInspection.scala
convert.match.statement.to.pattern.matching.function=将匹配语句转换为模式匹配的匿名函数

### org/jetbrains/plugins/scala/codeInspection/functionExpressions/UnnecessaryPartialFunctionInspection.scala
unnecessary.partial.function=不必要的偏函数

### org/jetbrains/plugins/scala/codeInspection/functionExpressions/UnnecessaryPartialFunctionQuickFix.scala
convert.to.anonymous.function=转换为匿名函数

### org/jetbrains/plugins/scala/codeInspection/hashCodeUsesVar/HashCodeUsesVarInspection.scala
non.value.field.is.accessed.in.hashcode='hashCode()' 中访问了非值字段

### org/jetbrains/plugins/scala/codeInspection/implicits/DeprecatedViewBoundInspection.scala
view.bounds.are.deprecated=视图边界已弃用
replace.with.implicit.parameters=替换为隐式参数

### org/jetbrains/plugins/scala/codeInspection/imports/SingleImportInspection.scala
single.import=移除仅包含一项导入的 import 语句中的大括号

### org/jetbrains/plugins/scala/codeInspection/infiniteCycle/LoopVariableNotUpdatedInspection.scala
display.name.loop.variable.not.updated.inside.loop=循环变量未在循环内更新

### org/jetbrains/plugins/scala/codeInspection/internal/AnnotatorBasedErrorInspection.scala
warning.with.message=警告\: {0}
error.detected=检测到错误
error.detected.with.message=检测到错误\: {0}

### org/jetbrains/plugins/scala/codeInspection/internal/ScalaShouldBeTextContainsInspection.scala
internal.replace.with.textContains=替换为 .textContains

### org/jetbrains/plugins/scala/codeInspection/internal/ScalaShouldBeTextMatchesInspection.scala
internal.replace.with.textMatches=替换为 .textMatches

### org/jetbrains/plugins/scala/codeInspection/literal/FloatLiteralEndingWithDecimalPointInspection.scala
display.name.floating.point.literal.ending.with.dot=浮点文字以 '.' 结束
convert.to.floating.point=转换为 {0}

### org/jetbrains/plugins/scala/codeInspection/methodSignature/ApparentResultTypeRefinementInspection.scala
insert.missing.assignment=插入缺少的赋值

### org/jetbrains/plugins/scala/codeInspection/methodSignature/JavaAccessorEmptyParenCallInspection.scala
remove.call.parentheses=移除调用括号

### org/jetbrains/plugins/scala/codeInspection/methodSignature/OverrideAbstractMemberInspection.scala
add.override.modifier.quickfix=添加重写修饰符

### org/jetbrains/plugins/scala/codeInspection/methodSignature/ParameterlessAccessInspection.scala
add.call.parentheses=添加调用括号

### org/jetbrains/plugins/scala/codeInspection/methodSignature/UnitMethodInspection.scala
convert.to.function.syntax=转换为函数语法
remove.redundant.type.annotation=移除冗余的类型注解
remove.redundant.type.annotation.and.equals.sign=移除冗余的类型注解和等号
remove.redundant.equals.sign=移除冗余的等号

### org/jetbrains/plugins/scala/codeInspection/methodSignature/quickfix/AddEmptyParentheses.scala
empty.parentheses=添加空括号

### org/jetbrains/plugins/scala/codeInspection/methodSignature/quickfix/RemoveParentheses.scala
redundant.parentheses=移除冗余括号

### org/jetbrains/plugins/scala/codeInspection/modifiers/SetModifierQuickfix.scala
add.modifier=Add ''{0}'' modifier
remove.modifier=Remove ''{0}'' modifier

### org/jetbrains/plugins/scala/codeInspection/monads/NestedStatefulMonadsInspection.scala
nested.stateful.monads=嵌套的有状态 monad

### org/jetbrains/plugins/scala/codeInspection/notImplementedCode/NotImplementedCodeInspection.scala
not.implemented=未实现
implement.quickfix.name=实现

### org/jetbrains/plugins/scala/codeInspection/packageNameInspection/ChainedPackageInspection.scala
package.declaration.could.use.chained.package.clauses=包声明可以使用链式包子句
use.chained.package.clauses.like=使用链式包子句\: 包 {0}; 包...
use.chained.package.clauses=使用链式包子句款

### org/jetbrains/plugins/scala/codeInspection/packageNameInspection/EnablePerformanceProblemsQuickFix.scala
enable.setting=启用设置，解决解析问题(这可能导致编辑器性能问题)
disable.setting=禁用设置，解决解析问题(这可以改善编辑器性能)
family.name.enable.setting=启用设置
fimaly.name.disable.setting=禁用设置

### org/jetbrains/plugins/scala/codeInspection/packageNameInspection/ScalaMoveToPackageQuickFix.scala
fimaly.name.move.file.to.package=将文件移到包中
move.file.to.default.package=将文件 {0} 移到默认包
move.file.to.package.with.packagename=将文件 {0} 移到包 {1}

### org/jetbrains/plugins/scala/codeInspection/packageNameInspection/ScalaPackageNameInspection.scala
package.names.does.not.correspond.to.directory.structure=包名称与目录结构不相符，这可能导致解析此文件中的类时出现问题

### org/jetbrains/plugins/scala/codeInspection/packageNameInspection/ScalaRenamePackageQuickFix.scala
rename.package.quickfix.command.name=重命名包 QuickFix
family.name.rename.package=重命名包
remove.package.statement=移除包语句
rename.package.to=将包重命名为 {0}

### org/jetbrains/plugins/scala/codeInspection/parameters/NameBooleanParametersInspection.java
name.boolean.ignore.single.parameter.methods=忽略只有一个参数的方法

### org/jetbrains/plugins/scala/codeInspection/parameters/NameBooleanParametersInspectionBase.scala
name.boolean.params=名称布尔参数

### org/jetbrains/plugins/scala/codeInspection/parameters/RedundantDefaultArgumentInspection.scala
argument.duplicates.corresponding.parameter.default.value=实参复制对应形参的默认值
delete.redundant.default.argument=删除冗余的默认参数

### org/jetbrains/plugins/scala/codeInspection/parameters/TypedParameterWithoutParenthesisInspection.scala
surround.with.parenthesis=用括号括起来

### org/jetbrains/plugins/scala/codeInspection/parentheses/ScalaUnnecessaryParenthesesInspection.java
clarifying.parentheses=澄清括号
around.function.type=围绕函数类型
around.function.type.parameter=围绕函数类型的参数
around.function.expr.parameter=围绕函数表达式的参数

### org/jetbrains/plugins/scala/codeInspection/parentheses/ScalaUnnecessaryParenthesesInspectionBase.scala
remove.unnecessary.parentheses.with.text=移除不必要的括号 {0}
unnecessary.parentheses=不必要的括号
remove.unnecessary.parentheses=移除不必要的括号

### org/jetbrains/plugins/scala/codeInspection/postfix/PostfixMethodCallInspection.scala
use.of.postfix.method.call=使用后缀方法调用
add.dot.to.method.call=向方法调用添加点

### org/jetbrains/plugins/scala/codeInspection/prefixMutableCollections/ReferenceMustBePrefixedInspection.scala
reference.must.be.prefixed=引用必须添加前缀
add.prefix.to.reference=向引用添加前缀

### org/jetbrains/plugins/scala/codeInspection/redundantBlock/RedundantBlockInspection.scala
remove.redundant.braces=移除冗余大括号
unwrap.the.expression=解开表达式
the.enclosing.block.is.redundant=封闭块冗余
redundant.braces.in.case.clause=case 子句中有冗余的大括号

### org/jetbrains/plugins/scala/codeInspection/relativeImports/RelativeImportInspection.scala
relative.import.detected=检测到相对导入
display.name.relative.import=相对导入
family.name.enable.full.qualified.imports=启用完全限定导入

### org/jetbrains/plugins/scala/codeInspection/resourceLeaks/SourceNotClosedInspection.scala
source.not.closed=源码未封闭

### org/jetbrains/plugins/scala/codeInspection/scaladoc/ScalaDocInlinedTagInspection.scala
display.name.inlined.tag=内联标签

### org/jetbrains/plugins/scala/codeInspection/scaladoc/ScalaDocMissingParameterDescriptionInspection.scala
display.name.missing.parameter.description=缺少参数描述

### org/jetbrains/plugins/scala/codeInspection/scaladoc/ScalaDocUnbalancedHeaderInspection.scala
all.text.from.header.closing.tag.to.end.of.line.will.be.lost=从标头结束标签到行尾的所有文本都将丢失

### org/jetbrains/plugins/scala/codeInspection/scaladoc/ScalaDocUnclosedTagWithoutParserInspection.scala
display.name.unclosed.tag=未封闭的标签

### org/jetbrains/plugins/scala/codeInspection/scaladoc/ScalaDocUnknownParameterInspection.scala
unknown.tag.parameter=未知标签参数
unknown.tag.type.parameter=未知标签类型参数
one.param.or.tparam.tag.for.one.param.or.type.param.allowed=一个参数/类型参数允许使用一个 param/tparam 标签
scaladoc.cant.process.tparams.for.type.alias.now=Scaladoc 现在无法处理类型别名的 tparams
param.and.tparams.tags.arnt.allowed.there=@param and @tparams tags aren't allowed there

### org/jetbrains/plugins/scala/codeInspection/scaladoc/ScalaDocUnknownTagInspection.scala
missing.tag.parameter=缺少标签参数
unknown.scaladoc.tag=未知 scaladoc 标签

### org/jetbrains/plugins/scala/codeInspection/scaladoc/package.scala
family.name.scala.scaladoc=Scala\: Scaladoc

### org/jetbrains/plugins/scala/codeInspection/shadow/TypeParameterShadowInspection.scala
display.name.suspicious.shadowing.by.a.type.parameter=类型参数的隐藏可疑

### org/jetbrains/plugins/scala/codeInspection/shadow/VariablePatternShadowInspection.scala
suspicious.shadowing.by.a.variable.pattern=变量模式的隐藏可疑
rename.variable.pattern=重命名变量模式
convert.to.stable.identifier.pattern=转换为稳定标识符模式 `{0}`

### org/jetbrains/plugins/scala/codeInspection/specs2/BuiltinMatcherExistsInspection.scala
specs2.builtin.matcher.alternative.exists=存在可用的匹配器
specs2.use.builtin.matcher=替换为内置匹配器

### org/jetbrains/plugins/scala/codeInspection/suppression/ScalaSuppressForStatementFix.scala
suppress.inspection.function=对函数禁止
suppress.inspection.typeAlias=对类型别名禁止
suppress.inspection.variable=对变量定义禁止

### org/jetbrains/plugins/scala/codeInspection/syntacticClarification/AutoTuplingInspection.scala
scala.compiler.will.replace.this.argument.list.with.tuple=Scala 编译器将使用元组替换此参数列表
display.name.auto.tupling=自动编制元组
make.tuple.explicit=令元组为显式元组

### org/jetbrains/plugins/scala/codeInspection/syntacticClarification/ConcealedApplyCall.scala
concealed.apply.call=已隐藏 "apply" 调用
make.apply.call.explicit=令 "apply" 调用为显式调用

### org/jetbrains/plugins/scala/codeInspection/syntacticClarification/VariableNullInitializerInspection.scala
use.option.type=Use Option type
use.underscore.initializer=Use _ initializer
variable.with.null.initializer=Variable with null initializer

### org/jetbrains/plugins/scala/codeInspection/syntacticSimplification/ConvertibleToMethodValueInspection.scala
convertible.to.method.value.name=匿名函数可转换为方法值
convertible.to.method.value.anonymous.hint=转换为方法值
convertible.to.method.value.eta.hint=移除冗余占位符

### org/jetbrains/plugins/scala/codeInspection/syntacticSimplification/FunctionTupleSyntacticSugarInspection.scala
syntactic.sugar.could.be.used=可以使用语法糖

### org/jetbrains/plugins/scala/codeInspection/syntacticSimplification/RedundantNewCaseClassInspection.scala
display.name.redundant.new.on.case.class=case 类中有冗余的 new

### org/jetbrains/plugins/scala/codeInspection/syntacticSimplification/RemoveRedundantReturnInspection.scala
return.keyword.is.redundant=Return 关键字冗余
display.name.redundant.return=冗余 Return

### org/jetbrains/plugins/scala/codeInspection/syntacticSimplification/ScalaUnnecessarySemicolonInspection.scala
remove.unnecessary.semicolon=移除不必要的分号
unnecessary.semicolon=不必要的分号

### org/jetbrains/plugins/scala/codeInspection/typeAnnotation/AddTypeAnnotationQuickFix.scala
add.type.annotation=添加类型注解

### org/jetbrains/plugins/scala/codeInspection/typeAnnotation/TypeAnnotationInspection.scala
learn.why=了解原因...
quickfix.modify.code.style=修改代码样式...
quickfix.make.private=设为 private
type.annotation.required.for={0} 必须有类型注解

### org/jetbrains/plugins/scala/codeInspection/typeChecking/ComparingUnrelatedTypesInspection.scala
comparing.unrelated.types.name=比较不相关的类型
comparing.unrelated.types.hint=比较不相关的类型\: {0} 和 {1}

### org/jetbrains/plugins/scala/codeInspection/typeChecking/PatternMayNeverMatchInspection.scala
pattern.may.never.match=模式可能从不匹配

### org/jetbrains/plugins/scala/codeInspection/typeChecking/TypeCheckCanBeMatchInspection.scala
type.check.can.be.replaced.by.pattern.matching=类型检查可以替换为模式匹配

### org/jetbrains/plugins/scala/codeInspection/typeLambdaSimplify/AppliedTypeLambdaCanBeSimplifiedInspection.scala
applied.type.lambda.can.be.simplified=可以简化应用的类型 lambda
simplify.type=简化类型

### org/jetbrains/plugins/scala/codeInspection/typeLambdaSimplify/KindProjectorSimplifyTypeProjectionInspection.scala
kind.projector.simplify.type=Kind Projector\: 简化类型

### org/jetbrains/plugins/scala/codeInspection/typeLambdaSimplify/KindProjectorUseCorrectLambdaKeywordInspection.scala
kind.projector.replace.lambda.with.lamda.char=Kind Projector\: 将 Lambda 替换为 λ
kind.projector.replace.lambda.char.with.lambda=Kind Projector\: 将 λ 替换为 Lambda
kind.projector.use.correct.lambda.keyword=Kind Projector\: 使用正确的 lambda 关键字
kind.projector.code.style.setting.use.lamda.char=Kind Projector\: 更改代码样式设置\: 使用 λ 代替 Lambda
kind.projector.code.style.setting.use.lamda.word=Kind Projector\: 更改代码样式设置\: 使用 Lambda 代替 λ

### org/jetbrains/plugins/scala/codeInspection/unusedInspections/DeleteUnusedElementFix.scala
remove.unused.element=移除未使用的元素

### org/jetbrains/plugins/scala/codeInspection/unusedInspections/ScalaOptimizeImportsFix.scala
mark.import.as.always.used.in.this.project=将 import 标记为始终在此项目中使用

### org/jetbrains/plugins/scala/codeInspection/unusedInspections/ScalaUnusedImportPassBase.scala
unused.import.statement=未使用的导入语句

### org/jetbrains/plugins/scala/codeInspection/unusedInspections/ScalaUnusedSymbolInspection.scala
display.name.unused.symbol=未使用的符号
declaration.is.never.used=从未使用声明

### org/jetbrains/plugins/scala/codeInspection/valInTraitInspection/AbstractValueInTraitInspection.scala
display.name.abstract.value.in.trait=特征中的抽象值
abstract.value.used.in.trait=特征中使用了抽象值
abstract.variable.used.in.trait=特征中使用了 abstract 变量

### org/jetbrains/plugins/scala/codeInspection/varCouldBeValInspection/ValToVarQuickFix.scala
convert.val.to.var=将 'val' 转换为 'var'

### org/jetbrains/plugins/scala/codeInspection/varCouldBeValInspection/VarCouldBeValInspection.scala
var.could.be.a.val=var 可以是 val
convert.var.to.val=将 'var' 转换为 'val'

### org/jetbrains/plugins/scala/codeInspection/xml/package.scala
family.name.scala.general=Scala\: 常规

### <unused>
drop.one.hint=将 drop(1) 替换为 tail
replace.equals.with.arrays.equals=使用 java.util.Arrays.equals 代替数组相等
suppress.inspection.argument=对参数禁止
internal.string.should.be.in.bundle=字符串应提取到捆绑包
internal.only.pass.hardcoded.strings.as.property.keys=仅将硬编码的字符串作为属性键传递
internal.expression.without.nls.passed.to.nls=不带 @Nls 的表达式传递到 @Nls
