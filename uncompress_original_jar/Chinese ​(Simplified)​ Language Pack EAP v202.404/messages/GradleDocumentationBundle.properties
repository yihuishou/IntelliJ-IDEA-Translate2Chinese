## Language plugins
gradle.documentation.org.gradle.api.Project.apply.plugin.java.non-html=将 Java 编译、测试和捆绑功能添加到项目中。它是其他许多 Gradle 插件的基础。
gradle.documentation.org.gradle.api.Project.apply.plugin.java=<p>将 Java 编译、测试和捆绑功能添加到项目中。它是其他许多 Gradle 插件的基础。另请参见<a class\="xref" href\="http\://www.gradle.org/docs/current/userguide/tutorial_java_projects.html">第 7 章 - <i>Java 快速入门</i></a>。</p><p>自动应用：java-base</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.groovy.non-html=添加 Groovy 项目构建支持。
gradle.documentation.org.gradle.api.Project.apply.plugin.groovy=<p>添加 Groovy 项目构建支持。另请参见<a class\="xref" href\="http\://www.gradle.org/docs/current/userguide/tutorial_groovy_projects.html">第 9 章 - <i>Groovy 快速入门</i></a>。</p><p>自动应用：java, groovy-base</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.scala.non-html=添加 Scala 项目构建支持。
gradle.documentation.org.gradle.api.Project.apply.plugin.scala=<p>添加 Scala 项目构建支持。</p><p>自动应用：java, scala-base</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.antlr.non-html=添加对使用 Antlr 生成解析器的支持
gradle.documentation.org.gradle.api.Project.apply.plugin.antlr=<p>添加对使用 <a class\="ulink" href\="http\://www.antlr.org/" target\="_top">Antlr</a> 生成解析器的支持。</p><p>自动应用：java</p>

## Integration plugins
gradle.documentation.org.gradle.api.Project.apply.plugin.application.non-html=添加将 Java 项目作为命令行应用程序运行和捆绑的任务。
gradle.documentation.org.gradle.api.Project.apply.plugin.application=<p>添加将 Java 项目作为命令行应用程序运行和捆绑的任务。</p><p>自动应用：java</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.ear.non-html=添加 J2EE 应用程序构建支持。
gradle.documentation.org.gradle.api.Project.apply.plugin.ear=<p>添加 J2EE 应用程序构建支持。</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.jetty.non-html=将 Web 应用程序部署到嵌入在构建中的 Jetty Web 容器。
gradle.documentation.org.gradle.api.Project.apply.plugin.jetty=<p>将 Web 应用程序部署到嵌入在构建中的 Jetty Web 容器。另请参见<a class\="xref" href\="http\://www.gradle.org/docs/current/userguide/web_project_tutorial.html">第 10 章 - <i>Web 应用程序快速入门</i></a>。</p><p>自动应用：war</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.maven.non-html=添加对发布构件到 Maven 存储库的支持。
gradle.documentation.org.gradle.api.Project.apply.plugin.maven=<p>添加对发布构件到 Maven 存储库的支持。</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.osgi.non-html=添加 OSGi 捆绑包构建支持。
gradle.documentation.org.gradle.api.Project.apply.plugin.osgi=<p>添加 OSGi 捆绑包构建支持。</p><p>自动应用：java-base</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.war.non-html=添加 Web 应用程序 WAR 文件组装支持。
gradle.documentation.org.gradle.api.Project.apply.plugin.war=<p>添加 Web 应用程序 WAR 文件组装支持。另请参见<a class\="xref" href\="http\://www.gradle.org/docs/current/userguide/web_project_tutorial.html">第 10 章 - <i>Web 应用程序快速入门</i></a>。</p><p>自动应用：java</p>

## Software development plugins
gradle.documentation.org.gradle.api.Project.apply.plugin.announce.non-html=发布消息到您最喜爱的平台，例如 Twitter 或 Growl。
gradle.documentation.org.gradle.api.Project.apply.plugin.announce=<p>发布消息到您最喜爱的平台，例如 Twitter 或 Growl。</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.build-announcements.non-html=将关于构建生命周期中有趣事件的本地公告发送到桌面。
gradle.documentation.org.gradle.api.Project.apply.plugin.build-announcements=<p>将关于构建生命周期中有趣事件的本地公告发送到桌面。</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.checkstyle.non-html=使用 Checkstyle 对项目的 Java 源文件执行质量检查，并根据这些检查生成报告。
gradle.documentation.org.gradle.api.Project.apply.plugin.checkstyle=<p>使用 <a class\="ulink" href\="http\://checkstyle.sourceforge.net/index.html" target\="_top">Checkstyle</a>  对项目的 Java 源文件执行质量检查，并根据这些检查生成报告。</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.codenarc.non-html=使用 CodeNarc 对项目的 Groovy 源文件执行质量检查，并根据这些检查生成报告。
gradle.documentation.org.gradle.api.Project.apply.plugin.codenarc=<p>使用 <a class\="ulink" href\="http\://codenarc.sourceforge.net/index.html" target\="_top">CodeNarc</a> 对项目的 Groovy 源文件执行质量检查，并根据这些检查生成报告。</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.eclipse.non-html=生成供 Eclipse IDE 使用的文件，从而可以将项目导入 Eclipse。
gradle.documentation.org.gradle.api.Project.apply.plugin.eclipse=<p>生成供 <a class\="ulink" href\="http\://eclipse.org" target\="_top">Eclipse IDE</a> 使用的文件，从而可以将项目导入 Eclipse。另请参见<a class\="xref" href\="http\://www.gradle.org/docs/current/userguide/tutorial_java_projects.html">第 7 章 - <i>Java 快速入门</i></a>。</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.eclipse-wtp.non-html=与 Eclipse 插件相同，此外还会生成 Eclipse WTP（Web 工具平台）配置文件。导入 Eclipse 后，您的 war/ear 项目应配置为可以使用 WTP 进行处理。
gradle.documentation.org.gradle.api.Project.apply.plugin.eclipse-wtp=<p>与 Eclipse 插件相同，此外还会生成 Eclipse WTP（Web 工具平台）配置文件。导入 Eclipse 后，您的 war/ear 项目应配置为可以使用 WTP 进行处理。另请参见<a class\="xref" href\="http\://www.gradle.org/docs/current/userguide/tutorial_java_projects.html">第 7 章 - <i>Java 快速入门</i></a>。</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.findbugs.non-html=使用 FindBugs 对项目的 Java 源文件执行质量检查，并根据这些检查生成报告。
gradle.documentation.org.gradle.api.Project.apply.plugin.findbugs=<p>使用 <a class\="ulink" href\="http\://findbugs.sourceforge.net" target\="_top">FindBugs</a> 对项目的 Java 源文件执行质量检查，并根据这些检查生成报告。</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.idea.non-html=生成文件并应用 Intellij IDEA IDE 所使用的 IDEA 特定自定义项，从而可以将项目导入 IDEA。
gradle.documentation.org.gradle.api.Project.apply.plugin.idea=<p>生成文件并应用 <a class\="ulink" href\="https\://www.jetbrains.com/idea/index.html" target\="_top">Intellij IDEA IDE</a> 所使用的 IDEA 特定自定义项，从而可以将项目导入 IDEA。</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.jdepend.non-html=使用 JDepend 对项目源文件执行质量检查，并根据这些检查生成报告。
gradle.documentation.org.gradle.api.Project.apply.plugin.jdepend=<p>使用 <a class\="ulink" href\="http\://clarkware.com/software/JDepend.html" target\="_top">JDepend</a> 对项目源文件执行质量检查，并根据这些检查生成报告。</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.pmd.non-html=使用 PMD 对项目的 Java 源文件执行质量检查，并根据这些检查生成报告。
gradle.documentation.org.gradle.api.Project.apply.plugin.pmd=<p>使用 <a class\="ulink" href\="http\://pmd.sourceforge.net" target\="_top">PMD</a> 对项目的 Java 源文件执行质量检查，并根据这些检查生成报告。</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.project-report.non-html=生成其中包含有关 Gradle 构建的实用信息的报告。
gradle.documentation.org.gradle.api.Project.apply.plugin.project-report=<p>生成其中包含有关 Gradle 构建的实用信息的报告。</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.signing.non-html=添加对构建文件和构件进行数字签名的功能。
gradle.documentation.org.gradle.api.Project.apply.plugin.signing=<p>添加对构建文件和构件进行数字签名的功能。</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.sonar.non-html=提供与 Sonar 代码质量平台的集成。被 sonar-runner 插件取代。
gradle.documentation.org.gradle.api.Project.apply.plugin.sonar=<p>提供与 <a class\="ulink" href\="http\://www.sonarsource.org" target\="_top">Sonar</a>代码质量平台的集成。被 <a class\="link" href\="http\://www.gradle.org/docs/current/userguide/sonar_runner_plugin.html"> <code class\="literal">sonar-runner</code></a> 插件取代。</p>
