
#replacement dialog preview
structural.replace.preview.dialog.title=结构替换预览
replace.preview.oktext=替换 (&R)
replacement.code=替换代码

# Search Dialog specific titles/options
structural.search.title=结构搜索
search.template=搜索模板\:
template.name.button=模板名

save.template.description.button=保存模板
save.template.text.button=保存模板... (&A)
save.inspection.action.text=将模板另存为检查…
create.inspection.from.template.action.text=从模板创建检查…
new.template.defaultname=未命名

recursive.matching.checkbox=递归匹配 (&R)
reformat.checkbox=重新格式化(&F)
use.static.import.checkbox=使用静态导入(&I)
search.target.label=搜索目标(&T)\:

history.button=历史记录(&H)
history.button.description=显示结构搜索历史记录
copy.existing.template.button=现有模板... (&X)
filter.button=切换筛选器面板
filter.button.description=切换变量筛选器面板
tools.button=工具

open.in.new.tab.checkbox=在新选项卡打卡 (&T)

search.dialog.scope.label=范围 (&S)
search.dialog.file.type.label=文件类型 (&Y)\:
search.dialog.context.label=上下文 (&O)\:

import.template.action=从剪贴板导入模板
export.template.action=将模板导出到剪贴板
no.template.found.warning=剪贴板上未找到模板
import.template.script.warning.title=警告\: 模式包含脚本
import.template.script.corrupted=剪贴板上未找到损坏的模板
import.template.script.warning=请注意，导入的模板包含 {1,choice,1\#1 个 Groovy 脚本筛选器|1<{1} 个 Groovy 脚本筛选器}，并且任何脚本都可以访问完整的 {0} 内部项。请确保脚本不会造成损坏，然后再使用此模板。
switch.to.search.action=切换到搜索
switch.to.replace.action=切换到替换

#search usage view specific
looking.in.progress.message=查看{0}
found.progress.message=找到{0}个匹配项
occurrences.of=模板''{0}''
occurrences.of.0.in.1=模板''{0}''在{1}中
replace.occurrences.of.0.with.1.in.2=将{2}中的''{0}''替换为''{1}''
occurrence=匹配
found.occurrences=在{0}中找到匹配
targets.node.text=结构搜索模板

# search dialog messages
this.pattern.is.malformed.message=此模式格式错误\n {0}
this.pattern.is.unsupported.message=不支持此模式
incorrect.pattern.message=不正确的模式

used.templates.history.dialog.title=使用过的模板历史记录
existing.templates.dialog.title=现有模板
selecttemplate.template.preview=模板预览\:
selecttemplate.template.label.please.select.template=<html><body><center>请在左侧的树中选择一个模板.</center></body></html>

# filters
count.filter.name=计数
reference.filter.name=引用
script.filter.name=脚本
text.filter.name=文本文件
type.filter.name=类型
context.filter.name=上下文
add.filter.title=添加过滤器
add.filter.label=添加筛选器
add.script.label=添加脚本
count.label=计数\={0}
default.label=, 默认值
max.label=最大值\=
min.label=最小值\=
reference.label=引用\=
reference.0.label=Reference\={0}
script.label=脚本\=
script.0.label=Script\={0}
text.label=文本文件\=
text.0.label=Text\={0}
type.label=按类型分组\=
type.0.label=Type\={0}
context.label=上下文\=
context.0.label=上下文\={0}
within.hierarchy.label=, 在层次结构内
whole.words.label=, 整个词
within.type.hierarchy.check.box=在类型层次结构内
whole.words.check.box=单词
regex.check.box=正则表达式
no.filters.whole.template.label=没有为整个模板添加筛选器。
no.filters.for.0.label=没有为 ${0}$ 添加筛选器。
no.script.for.0.label=没有为 ${0}$ 添加脚本。
filters.for.whole.template.title=整个模板的筛选器\:
filters.for.0.title=${0}$ 的筛选器\:

type.filter.help.text=<p>根据提供的“|”分隔的模式检查匹配表达式的类型。<p>使用“\!”反转模式。
text.filter.help.text=<p>根据提供的模式检查匹配的文本。<p>使用“\!”反转模式。<p>支持正则表达式。
script.filter.match.variable.help.text=<p>使用 GroovyScript IntelliJ API 筛选搜索结果。当指定的脚本返回 <code>false</code> 时，找到的元素将不在搜索结果中。非布尔脚本结果将转换为布尔值。<p>可用变量\: {0}
script.filter.replacement.variable.help.text=<p>使用 GroovyScript Intellij API 创建自定义替换，以实现高级重命名、重写或重构。替换时，替换模板中的变量将替换为指定脚本的字符串结果。<p>可用变量\: {0}
reference.filter.help.text=<p>可以使用 {0} 自动完成预配置的搜索模式。<p>根据提供的模式检查引用的元素。<p>使用“\!”反转模式。


# Replace Dialog specific titles/options
structural.replace.title=结构替换
shorten.fully.qualified.names.checkbox=缩短完全限定名称 (&O)
replacement.template.label=替换模板\:

# Replace validation messages
unsupported.replacement.pattern.message=不支持的替换模式{0}
malformed.replacement.pattern.message=格式错误的替换模式{0}

#replacement usage view specific
preview.replacement.button=预览替换 (&P)
do.replace.all.button=全部替换 (&A)
replace.selected.button=替换所选项 (&A)

# predefined configuration categories
expressions.category=表达式
user.defined.category=用户定义
xml_html.category=xml/html
generics.category=Java/泛型
misc.category=Java/杂项
metadata.category=Java/注释、Javadoc 和元数据
class.category=Java/基于类
operators.category=Java/运算符
j2ee.category=Java/Java EE
interesting.category=Java/关注
used.templates=使用的模板\:

# predefined configuration names

predefined.configuration.method.calls=方法调用 
predefined.configuration.struts.1.1.actions=Struts 1.1 操作
predefined.configuration.ejb.interface=ejb 接口
predefined.configuration.servlets=servlet
predefined.configuration.unboxing.in.method.calls=在方法调用中的拆箱
predefined.configuration.boxing.in.method.calls=在方法调用中的装箱
predefined.configuration.unboxing.in.declarations=在声明中的拆箱
predefined.configuration.boxing.in.declarations=在声明中的装箱
predefined.configuration.any.unboxing=拆箱的表达式
predefined.configuration.any.boxing=装箱的表达式
predefined.configuration.filters=过滤器
predefined.configuration.session.ejb=会话 ejb
predefined.configuration.fields.variables.read=字段/变量 读取
predefined.configuration.symbol=符号
predefined.configuration.inner.classes=内部类
predefined.configuration.]junit.test.cases=junit测试用例
predefined.configuration.ifs=如果是
predefined.configuration.anonymous.classes=匿名类
predefined.configuration.javadoc.tags=javadoc标签
predefined.configuration.all.methods.of.the.class.within.hierarchy=类所有的方法(结构层次中)
predefined.configuration.similar.methods.structure=类似的方法结构
predefined.configuration.class.implements.two.interfaces=实现两个接口的类
predefined.configuration.bean.info.classes=Bean信息类
predefined.configuration.all.expressions.of.some.type=一些类型的所有表达式
predefined.configuration.variables.of.generic.types=通用类型变量
predefined.configuration.diamond.operators=diamond操作符
predefined.configuration.method.returns.bounded.wildcard=方法返回绑定的通配符
predefined.configuration.generic.constructors=泛型构造函数
predefined.configuration.comments=注释
predefined.configuration.fields_variables.with.given.name.pattern.updated=已更新给名称模式的字段/变量
predefined.configuration.trys=尝试的
predefined.configuration.try.without.resources=没有资源和 catch 块的 try 语句
predefined.configuration.switch.with.branches=分支极少的 switch 语句和表达式
predefined.configuration.labeled.break=带标签的 break 语句
predefined.configuration.block.dcls=块 dcl
predefined.configuration.methods.of.the.class=类的方法
predefined.configuration.deprecated.methods=弃用的方法
predefined.configuration.instanceof=instanceof
predefined.configuration.implementors.of.interface.within.hierarchy=接口的实现(结构层次中)
predefined.configuration.generic.casts=泛型
predefined.configuration.field.selections=字段选择
predefined.configuration.fields.of.the.class=类的字段
predefined.configuration.array.access=数组访问
predefined.configuration.usage.of.derived.type.in.cast=派生类型的使用
predefined.configuration.annotated.methods=注解方法
predefined.configuration.not.annotated.methods=未注解的方法
predefined.configuration.annotation.declarations=注解声明
predefined.configuration.annotations=注解
predefined.configuration.annotated.class=注解类
predefined.configuration.entity.ejb=实体 ejb
predefined.configuration.generic.methods=通用方法
predefined.configuration.cloneable.implementations=可克隆的实现
predefined.configuration.xdoclet.metadata=XDoclet元数据
predefined.configuration.type.var.substitutions.in.intanceof.with.generic.types=使用泛型类型替换 instanceof 中的类型变量
predefined.configuration.singletons=单例
predefined.configuration.switches=switch
predefined.configuration.foreaches=foreach循环
predefined.configuration.interfaces=接口
predefined.configuration.string.literals=字符串文字
predefined.configuration.all.inner.classes.within.hierarchy=所有内部类(层次结构中)
predefined.configuration.direct.subclasses=直接子类
predefined.configuration.javadoc.annotated.methods=javadoc注解方法
predefined.configuration.javadoc.annotated.fields=javadoc注解字段
predefined.configuration.assignments=任务
predefined.configuration.casts=转换
predefined.configuration.serializable.classes.and.their.serialization.implementation=可序列化的类及其序列化实现
predefined.configuration.annotated.fields=注解字段
predefined.configuration.generic.classes=泛型类
predefined.configuration.javadoc.annotated.class=javadoc注解类
predefined.configuration.constructors.of.the.class=类的构造函数
predefined.configuration.typed.symbol=光标符
predefined.configuration.all.fields.of.the.class=该类的所有字段
predefined.configuration.instance.fields.of.the.class=该类的实例字段
predefined.configuration.packagelocal.fields.of.the.class=package-private 字段
predefined.configuration.classes=类
predefined.configuration.classes.interfaces.enums=类、接口和枚举
predefined.configuration.new.expressions=新的表达式
predefined.configuration.lambdas=lambdas
predefined.configuration.method.references=方法引用
predefined.configuration.string.concatenations=字符串连接
predefined.configuration.deprecated.method.calls=对已弃用方法的方法调用
predefined.configuration.methods.with.final.parameters=具有 final 参数的方法和构造函数
predefined.configuration.class.static.blocks=static 初始值设定项
predefined.configuration.class.instance.initialization.blocks=实例初始化块
predefined.configuration.class.any.initialization.blocks=任何类初始化块
predefined.configuration.logging.without.if=如果没有日志
predefined.configuration.assert.without.description=没有描述的 assert 语句
predefined.configuration.class.with.parameterless.constructors=具有无参数构造函数的类
predefined.configuration.static.fields.without.final=不为 final 的 static 字段
predefined.configuration.sample.method.invokation.with.constant.argument=具有常量参数的示例方法调用
predefined.configuration.interfaces.having.no.descendants=未实现或扩展的接口
predefined.configuration.enums=枚举
predefined.configuration.comments.containing.word=注释包含给定的字词

# edit variable constraint dialog options
invalid.regular.expression=无效的正则表达式\: {0}
unlimited.placeholder=无限制

# tooltip message fragment on ss variables
no.constraints.specified.tooltip.message=没有指定约束
no.filters.tooltip.message=无筛选器
script.option.text=脚本文本\:
min.occurs.tooltip.message=[{0},{1}]
target.tooltip.message=目标
text.tooltip.message=文本 {0,choice,0\#\=|1\#≠}{1}{2,choice,0\#|1\#, 全文}{3,choice,0\#|1\#, 在层次结构中}
hierarchy.tooltip.message=在层次结构内
exprtype.tooltip.message=类型{0,choice,0\#\=|1\#≠}{1}{2,choice,0\#|1\#, 在层次结构中}
expected.type.tooltip.message=预期类型{0,choice,0\#\=|1\#≠}{1}{2,choice,0\#|1\#, 在层次结构中}
script.tooltip.message=脚本\:\n {0}
within.constraints.tooltip.message=在{0,choice,0\#\=|1\#≠}{1}中
reference.target.tooltip.message=引用{0,choice,0\#\=|1\#≠}{1}
complete.match.variable.tooltip.message=完成匹配\: {0}
replacement.variable.is.not.defined.message=替换变量{0}未定义.
replacement.variable.is.not.valid=替换变量{0}有脚本代码问题{1}
replacement.template.is.not.expression.error.message=搜索模板是一个表达式,但替换模板不是表达式.
replacement.not.supported.for.filetype={0}文件类型不支持替换
search.template.is.not.expression.error.message=搜索模板不是表达式,但替换模板是一个格式正确的表达式.

modify.editor.content.command.name=修改编辑器内容
option.is.not.recognized.error.message=无法识别约束''{0}''

error.only.one.target.allowed=仅允许一个目标
error.condition.only.on.first.variable.reference=限制只允许在变量的第一个引用
error.two.different.type.constraints=两种不同的类型约束
error.incorrect.regexp.constraint=不正确的正则约束\:{0} for {1}
error.expected.character=单引号后的字符
error.overflow=值溢出
error.expected.digit=应为数字
error.expected.brace1=数字, '}' 或 ',' 是预期的
error.expected.brace2=数字或 '}'是预期的
error.empty.quantifier=空量词
error.expected.condition=''{0}''之后的约束
error.expected.condition.name=丢失约束名称
error.expected.value=''{0}'' 是预期的
error.unexpected.value=意外的''{0}''
invalid.modifier.type=无效的修饰符类型{0}
error.argument.expected=''{0}'' 约束上应为参数
error.cannot.invert=无法反转''{0}''选项
error.only.applicable.to.complete.match=约束''{0}''仅适用于完全匹配

SSRInspection.replace.with=替换为''{0}''
SSRInspection.family.name=替换结构
SSRInspection.display.name=结构检索
SSRInspection.add.search.template.button=添加搜索模板...
SSRInspection.add.replace.template.button=添加替换模板...
overwrite.message=确认使用相同的名称覆盖配置
overwrite.title=确认覆盖保存的配置
template.in.use.message=从模板''{1}''使用''{0}'',你确定要删除它吗?
ssr.will.not.find.anything=与选定范围内的任何内容不匹配
inspection.script.problem=在结构搜索检查模板 ''{1}'' 中{0}
inspection.template.problem=模板 ''{0}'' 中存在结构搜索检查问题
search.template.problem=结构搜索\: {0}
search.script.problem=结构检索脚本抛出异常\: {0}
complete.match.variable.name=完全匹配
regular.expression.help.label=正则表达式帮助
template.in.use.title=模板''{0}''正在使用中

structural.search.group.name=结构搜索
edit.metadata.button=编辑元数据…
add.pattern.action=添加模式
templates.title=模板\:
add.inspection.button=添加结构搜索 \\&\\& 替换检查
remove.inspection.button=移除结构搜索 \\&\\& 替换检查

meta.data.dialog.title=结构检索检查
inspection.name.label=检查名称\:
problem.descriptor.label=问题工具提示(使用宏 \#ref 插入高亮显示的代码)\:
description.label=描述
suppress.id.label=抑制 ID\:
no.description.message=未提供描述

name.must.not.be.empty.warning=名称不得为空
inspection.with.name.exists.warning=名称为 ''{0}'' 的检查已存在
suppress.id.must.match.regex.warning=抑制 ID 必须匹配正则表达式 [a-zA-Z_0-9.-]+
suppress.id.in.use.warning=抑制 ID ''{0}'' 已由另一个检查使用
button.replace=替换
popup.content.directory=不是一个目录
command.name.adjust.line.indent=调整行缩进
command.name.live.search.template.builder=活动搜索模板构建器
tooltip.preconfigured.search.patterns=<p>可以使用 {0} 自动完成预配置的搜索模式。<p>提供的模式用于约束目标模板上下文