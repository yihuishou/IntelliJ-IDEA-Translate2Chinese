django=Django
django-template=Django 模板

need-python-sdk=需要 Python SDK 生成 Django 项目
project-create-error=无法生成 Django 项目
no-project-folder=生成后没有项目文件夹
create-folder-error=无法创建模板文件夹：{0}
no-django=在所选解释器中找不到 Django

goto-template=转到模板
goto-template-name=转到 {0} 模板
goto-templates=转到模板

project-name=项目名称 (&P)：
templates-folder=模板文件夹 (&T)：
templates-folders=模板目录\:
settings-module=设置\:
app-name=应用程序名称(&A)：
select-templates-folder-title=选择模板文件夹
select-templates-folder-desc=选择模板文件夹
select-root-folder-title=选择 Django 根文件夹
select-root-folder-desc=选择 Django 根文件夹

skip-template-create=由于未指定模板文件夹，因此跳过了模板创建
create-view=Django：为 {0} 函数创建视图
template-name-error=模板名称应仅包含字母、数字和下划线
view-function-exist=视图函数已存在
template-exist=模板已存在：{0}
empty-method-name=方法名称为空
no-view=找不到视图文件：{0}

module=模块\:
port=端口
select-module=请选择模块
port-error=端口应为整数
port-not-specified=未指定端口

# manage.py

manage.run.tab.name=Django\: manage.py
manage.run.error=无法启动 manage.py：
manage.run.error.no-python=找不到 python 解释器

django.popup.prompt.text=<html><font size\="3">输入 manage.py 任务名称</font><br/><font size\="2">按 Enter 执行常见运行或，或按 Shift-Enter 以指定参数</font></html>
django.popup.find.not.found=找不到任务

enter-name=请输入名称（仅允许字母、数字和下划线）：
select-app=请选择应用程序
all-apps=[所有应用程序]
no-apps=无应用程序

django.console=Django 控制台
django.manage.py=Manage.py 任务
django.manage.py.env.settings=环境变量：

manage.task.desc.cleanup=清理数据库中的旧数据（仅现在已过期的会话）。
manage.task.desc.compilemessages=将 .po 文件编译为 .mo 文件，以便使用内置 gettext 支持
manage.task.desc.createcachetable=创建使用 SQL 缓存后端所需的表。
manage.task.desc.createsuperuser=创建超级用户。
manage.task.desc.diffsettings=显示当前 settings.py 和默认设置之间的差异。
manage.task.desc.dumpdata=输出数据库的内容。
manage.task.desc.flush=对当前数据库执行 ``sqlflush``。
manage.task.desc.inspectdb=内省给定数据库中的数据库表，并输出 Django 模型模块。
manage.task.desc.makemessages=将 Python 源码中的所有字符串拉取到消息文件。
manage.task.desc.reset=在当前数据库中对给定应用执行 ``sqlreset``。
manage.task.desc.shell=启动 Python 交互式解释器。
manage.task.desc.sql=打印 CREATE TABLE SQL 语句。
manage.task.desc.sqlall=打印 CREATE TABLE、CREATE INDEX 和自定义 SQL 语句。
manage.task.desc.sqlclear=打印 DROP TABLE SQL 语句。
manage.task.desc.sqlcustom=打印自定义修饰性 SQL 语句。
manage.task.desc.sqlflush=返回必要的 SQL 语句列表，以将所有表返回到安装后的状态。
manage.task.desc.sqlindexes=打印 CREATE INDEX SQL 语句。
manage.task.desc.sqlreset=打印 DROP TABLE SQL，然后 CREATE TABLE SQL。
manage.task.desc.sqlsequencereset=打印用于重置序列的 SQL 语句。
manage.task.desc.startapp=在项目目录中创建 Django 应用目录结构。
manage.task.desc.syncdb=创建尚未创建的数据库表。
manage.task.desc.test=运行测试套件。
manage.task.desc.validate=验证安装的所有模型。
manage.task.desc.dbshell=运行设置中指定的数据库引擎的命令行客户端。
manage.task.desc.testserver=使用给定夹具中的数据运行 Django 开发服务器。
manage.task.desc.loaddata=搜索命名夹具的内容并将其加载到数据库中。
manage.task.desc.sqlinitialdata=
manage.task.desc.runserver=在本地计算机上启动轻量级开发 Web 服务器



user-name=用户名\:
password=密码\:
email=电子邮件\:
create-superuser=创建超级用户

inspection.close.tag.name=起始标签和结束标签不匹配
inspection.error.no-closing-tag=只有起始标签，没有结束标签
inspection.error.no-opened-tag=只有结束标签，没有起始标签
inspection.error.open-tag-without-closed=''{0}'' 起始标签没有结束标签
inspection.error.middle-tag-without-opened=''{0}'' 没有起始标签
inspection.error.no-if-tag=只有 Else 标签，没有 if 标签
inspection.error.no-for-tag=空标签，没有 for 标签

inspection.unresolved-template-reference.display-name=未解析模板引用
inspection.unresolved-template-reference.error-msg=未解析模板引用 ''{0}''

inspection.unresolved-static-reference.display-name=未解析的 static 引用
inspection.unresolved-static-reference.error-msg=未解析的 static 引用 ''{0}''

inspection.unresolved-tag.display-name=未解析标签
inspection.unresolved-tag.error-msg=未解析标签 ''{0}''

inspection.unresolved-filter.display-name=未解析筛选器
inspection.unresolved-filter.error-msg=未解析筛选器 ''{0}''

inspection.unresolved-load.display-name=未解析库检查
inspection.unresolved-load.error-msg=未解析库 ''{0}''

inspection.unresolved-name.error-msg=未解析名称 ''{0}''

inspection.relation.display-name=Django 关系检查
inspection.incompatible.display-name=Django 检查，检查模板代码的 django 版本兼容性
inspection.incompatible.url_tag.error=从 Django 1.5 版起，视图名称应放在引号中，在 1.5 以前的版本中则不应放在引号中
inspection.incompatible.fix.url_tag.add_quotes=在 url 参数周围添加引号
inspection.incompatible.fix.url_tag.remove_quotes=移除 URL 参数周围的引号
inspection.incompatible.error=''{0}'' 仅在 ''{1}'' 中可用


inspection.url_tag_arguments.display-name=Django 检查，检查必选参数的 {% url %} 标签
inspection.url_tag_arguments.args_mixed=不要在单个调用中混合位置语法和关键字语法。
inspection.url_tag_arguments.redundant_argument=url 正则表达式中没有参数 ''{0}''
inspection.url_tag_arguments.missing_args=缺少以下参数：''{0}''
inspection.url_tag_arguments.named_arg_string=''{0}''
inspection.url_tag_arguments.pos_arg_string=参数 \# ''{0}''
inspection.url_tag_arguments.bad_regex=表达式 ''{0}'' 与模式 ''{1}'' 不匹配

inspection.unresolved_url.display-name=Django 检查，检查解析的 {% url %} 标签 url
inspection.unresolved_url.error=无法解析 url ''{0}''，请确保 urls.py、views.py 等中存在此 url。在未解析 url 之前，无法进行参数检查


inspection.django-orm-inspection.display-name=Django ORM 检查
# Some methods are disabled when M2M has intermediate table: https://docs.djangoproject.com/en/1.7/topics/db/models/#extra-fields-on-many-to-many-relationships
inspection.django-orm-inspection.disabled-m2m-interm=如果使用中间模型，则方法 ''{0}'' 不能用于多对多关系。可以考虑在中间模型管理器中进行调用。
# Some methods do not even exist if foreign key does not allow nulls: https://docs.djangoproject.com/en/1.7/ref/models/relations/#django.db.models.fields.related.RelatedManager.clear
# ... and https://docs.djangoproject.com/en/1.7/ref/models/relations/#django.db.models.fields.related.RelatedManager.remove
inspection.django-orm-inspection.non-existence-due-to-foreign-key-not-null-method=当外键不允许 null 时，管理器中会不存在方法 ''{0}''。可以考虑向外键构造函数中添加 null \= true。

# DuplicatedBlockNamesInspection
INSP.NAME.duplicated.block.names=重复的块名称
INSP.NAME.name.$0.is.duplicated=块名称 ''{0}'' 重复

broken.line.comment.inspection.name=行注释中断

# ExtendsTagPositionInspection
INSP.NAME.extends.tag.position={% extends %} 标签位置错误

inspection.end-block-name.display-name=Django 端块名称与检查不匹配

create-view-quick-fix-name=创建 Django 视图方法

django-create-template=创建模板
django-create-view-method=创建视图方法
create-template=创建模板
name=模板名\:
folder=模板文件夹：

select-template-folder=选择模板文件夹

select-template-folder-text=请选择模板文件的根目录

django.facet.wizard.error.no.skd=Django facet 需要 Python SDK
django.facet.wizard.error.skd.without.django=请选择包含 Django 包的 Python SDK
django.facet.wizard.error.bad.project.name=项目名称应仅包含字母、数字和下划线
django.facet.wizard.error.bad.app.name=应用名称应仅包含字母、数字和下划线
django.facet.wizard.error.project.equals.app.name=不能像调用项目一样调用应用
django-root-folder=Django 项目根：

django.action.rerun=重新运行
manage-script=管理脚本：
template.path=模板路径：
templates.root=模板根：

django.block.is.overridden=在继承者中被覆盖
django.block.inheritors.navigation.title=<html><body>选择 <b>{0}</b> 的继承者（找到 {1} 模板）</body></html>
django.block.inheritors.navigation.findUsage.title={0} 的继承者 
# Magic literal "url name" like {% url "here" %}
magic_literals.django_url_name=Django url
# Magic literal django context param" like {{ here }}
magic_literals.django_template_context_param=Django 模板上下文参数
template.language=模板语言\:

# Django console name
django.manage.name=manage.py@{0}
# Show user progress bar while python fetches commands
django.manage.real_commands.modal_title=正在获取 Django 命令...
# Python process died fetching commands
django.manage.real_commands.fail.died=无法获取 "{0}" 模块中的实际命令：python 进程死亡，代码为 {1}\: {2}
# Error to show to user when reason is unknown
django.manage.real_commands.fail.unknown_reason=未知原因
# Process failed to execute and fetch commands
django.manage.real_commands.fail.cant_execute=无法在模块 {0} 中执行进程：{1}
# Tab with to display such errors
django.manage.real_commands.fail.error_title=Django 错误
# What to tell user when "manage shell" is called
django.manage.open_console=正在单独的窗口中运行 shell...
# Text to display when several modules exist, and user should choose one to run manage.py on
django.manage.several_modules=请选择要在其中运行 manage.py 的模块
# To be reported when helper XML output is badly formatted
django.manage.bad_commands_out=由于输出错误，获取实际命令时出错。有关详细信息，请查看日志。
# Message to be shown when timeout elapsed waiting for manage.py commands
django.manage.timeout=等待 python 生成命令列表超时（{0} 秒） 

settings.file-tracking.comment=用冒号分隔多个名称。支持 Glob 样式的通配符
settings.no.value.validation.error.message=请指定 {0}
settings.no.value.for.name.validation.error.message=找不到 {1} 的 {0}
settings.no.manage.value.validation.error.message=请指定 {0}
settings.project.root.validation.error.message=请指定 Django 项目根目录
settings.no.project.root.dir.validation.error.message=指定的 Django 项目根目录不存在
settings.project.root.dir.validation.error.message=Django 项目根应为目录
configurable.DjangoFacetTab.display.name=Django
configurable.DjangoFacet.display.name=Django

# Templates
django.templates.with.name.exists=模板 {0} 已存在
django.templates.root.selection.invalid=模板根选择无效
django.templates.root.folder.missing=模板根文件夹不存在
django.templates.root.not.specified=未指定模板根
django.templates.name.not.valid=模板名称无效
django.templates.create.capitalized=创建模板
django.templates.create.no.capitalization=创建模板
django.create.template.with.name=创建模板 {0}
django.template.colours.display.name=Django/Jinja2 模板
django.template.colours.filter=过滤
django.template.colours.identifier=标识符
django.template.colours.number=数字
django.template.colours.comment=注释
django.template.colours.tag.name=标签名称
django.template.colours.tag=标签
django.template.colours.string=字符串
django.template.colours.keyword=关键字
django.template.context.type.name=Django 模板
django.template.factory.error.missing.dir.title=目录 {0} 不存在
django.template.factory.error.missing.dir.message=''{1}'' 中不存在目录 ''{0}''。要创建此目录吗？
django.templates.checkbox.create=创建模板

django.facet.name=Django
django.reference.cant.resolve=无法解析 ''{0}''
django.reference.cant.resolve.function=无法解析函数 ''{0}''
django.reference.cant.resolve.class=无法解析类 ''{0}''
django.reference.cant.resolve.class.or.function=无法解析类或函数 ''{0}''
django.cant.patch.created.project=无法修补已创建的项目
django.remote.project.not.synchronized=远程项目尚未与本地版本同步。PyCharm 无法根据您的设置对其进行修补。项目可能仍可以在远程站点上使用。在这种情况下，您需要手动下载。
django.server.display.name=Django 服务器
django.server.config.description=Django 服务器
django.select.manage.script=选择 Django 管理脚本
django.select.settings.file=选择 Django 设置文件
django.run.browser.setting=运行浏览器：
django.start.js.debugger.automatically=调试时自动启动 JavaScript 调试器
django.enable.admin=启用 Django admin (&E)
django.server.run.config.additional.options=其他选项：
django.server.run.config.host=主机
django.server.run.config.custom.command=自定义运行命令：
django.server.run.config.no.reload=不重新加载
django.server.run.config.test.server=测试服务器
django.settings.dont.use.testrunner=不使用 Django 测试运行程序：
django.settings.folder.pattern=用于跟踪文件的文件夹模式：
django.settings.show.structure=显示结构
django.settings.completion.tail.text=配置常量

django.exception.breakpoint=Django 异常断点
django.line.breakpoint=Django 行断点

django.tests.config.select.settings.file=选择 Django 设置文件
django.tests.config.custom.settings=自定义设置：
django.tests.config.options=选项\:
django.tests.config.target=目标\:
enable.django.support.checkbox.text=启用 Django 支持

# Add load tag quick-fix
django.add.load.tag.family.name=添加加载标签
django.add.load.tag.suggestion.single.result=从 {0} 加载
django.add.load.tag.suggestion.several.results=从...加载

django.parse.error.block.identifier.expected=预期为块标识符
django.parse.error.identifier.expected.after=标识符应在此对象后面
django.parse.error.in.expected=预期为 'in'
django.parse.error.member.expression.expected=预期为成员表达式
django.parse.error.percent.brace.expected=%} 是预期的
django.parse.error.identifier.expected.before.from.keyword=预期 from 关键字前面为标识符
django.parse.error.id.or.literal.expected=预期为 ID 或文字
django.parse.error.unknown.subtag.for.blocktrans.found.with.count.or.and.expected=找到 blocktrans 的未知子标签。预期为 'with'、'count' 或 'and'
django.parse.error.equals.or.as.expected=预期为 '\=' 或 'as'
django.parse.error.as.expected=预期为 'as'
django.parse.error.id.expected=预期为 ID
django.parse.error.trimmed.argument.duplicated=重复的 'trimmed' 参数
django.parse.error.trimmed.should.be.the.first.argument.of.tag='trimmed' 应是标签的第一个参数
django.parse.error.id.lowercase.expected=预期为 id
django.parse.error.as.var.should.be.the.first.argument.of.tag='asVar' 应是标签的第一个参数
django.creating.django.facet=正在创建 Django Facet
django.create.django.application=创建 Django 应用程序
django.error.creating.django.application.0=创建 Django 应用程序时出错：{0}
django.parse.error.name.expected=预期名字
django.parse.error.as.keyword.expected=预期为 'as' 关键字 
django.parse.error.by.keyword.expected=预期为 'by' 关键字 
django.parse.error.as.or.equals.expected=预期为 'as' 或 '\='
django.parse.error.value.expected=值是预期的
django.parse.error.identifier.expected=标识符是预期的
django.parse.error.parameter.assignment.expected=预期为参数赋值
django.parse.error.named.expression.expected=预期为命名表达式
django.parse.error.whitespace.expected=预期为空格
django.parse.error.wrong.identifier=错误标识符
django.parse.error.whitespace.expected.before.a.string=预期字符串前面为空格
django.parse.error.named.expression=命名表达式
django.parse.error.silent.keyword.expected=预期为 'silent' 关键字
django.parse.error.member.literal.expected=预期为成员文字
django.create.view.quickfix=创建视图方法
action.Django.RunManageTaskAction.text=运行 manage.py 任务...
action.Django.RunManageTaskAction.description=运行 manage.py 任务