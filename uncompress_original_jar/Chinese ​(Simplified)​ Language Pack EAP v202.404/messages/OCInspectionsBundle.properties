configurable.naming.convention.header.guard.style=头文件保护符样式\:
configurable.naming.convention.several.rules.hint=如果一种实体类型有多个规则，将使用列表中的最后一个。
configurable.clangTidy.executable=指定 Clang-Tidy 可执行文件
configurable.clangTidy.checks.hint=以逗号分隔的已启用和已禁用检查的列表。
configurable.clangTidy.prefer.files.over.ide.settings=首选 .clang-tidy 文件而不是 IDE 设置
configurable.clangTidy.checks.options.button=配置 Clang-Tidy 检查选项…
configurable.clangTidy.use.external.binary.checkbox=使用外部 Clang-Tidy 而不是内置 Clang-Tidy\:
configurable.clangTidy.use.external.binary.path=Clang-Tidy 路径
configurable.clangTidy.checks.options.dialog.title=配置 Clang-Tidy 检查选项
configurable.clangTidy.checks.options.example.hint=示例\: 选项 - modernize-use-nullptr.NullMacros，值 - NULL_MACRO
configurable.clangTidy.checks.options.learnMore.button=了解更多
configurable.clangTidy.checks.options.option.column=选项
configurable.clangTidy.checks.options.value.column=值
configurable.clangTidy.min.supported.clangTidy.version=注意\: 支持 7.0.0 或更高版本的 Clang-Tidy
configurable.clangTool.version.task.title=正在检查 {0} 版本
configurable.clangTool.version.checking=内置 {0} 版本\: 正在检查…
configurable.clangTool.version=内置 {0} 版本\: {1}
configurable.clangTool.revision.internal=修订\:{0}
configurable.clangTool.revision=LLVM 修订\: {0}
configurable.clangTool.version.unable.check=内置 {0} 版本\: 无法检查
configurable.clangTidy.example.link=示例
configurable.ClangTidyConfigurable.display.name=Clang-Tidy
inspections.argument.selection.defects.checkbox=检查使用短名称(少于三个字符)的形参/实参
inspections.clangTidy.open.settings.action=打开设置
inspection.clangTidy.suppress.check.for.line=禁止行的{0}
inspection.clangTidy.suppress.for.line=对行禁止
inspection.clangTidy.not.found=Clang-Tidy 未找到或无法执行
inspection.clangTidy.failed=无法执行 Clang-Tidy\:
inspection.disable.clangTidy.check=禁用 {0} 检查
inspection.disable.all.clangTidy.checks=禁用所有 {0} 检查
inspection.naming.convention.edit.settings.link=编辑代码样式设置
inspection.naming.convention.rename.fix=重命名为 {0}
inspection.naming.convention.rename.header.guard.fix=将头文件保护符重命名为 {0}
inspection.context.sensitive.analysis=上下文相关分析
inspection.global.unused.analysis=全局未使用的分析
inspection.inconsistent.naming=命名不一致
inspection.general=常规
inspection.modern.syntax=可以使用现代语法
inspection.localize.string=本地化字符串
inspection.loop.condition.is.not.updated=循环条件未在循环内更新
inspection.arc.issues=ARC 问题
inspection.sending.dealloc=正在发送 'dealloc'
inspection.assign.in.condition.with.self='\=' 用于包含“self”的条件表达式
inspection.usage.of.api.unavailable=使用了对部署目标不可用的 API
inspection.deprecated.api=使用了弃用 API
inspection.assign.in.condition=条件表达式中存在 '\='
inspection.kr.unspecified.parameters=通过 K&R 未指定参数语法将参数传递至函数
inspection.hiding.non.virtual.function=隐藏了非虚拟函数
inspection.constant.conditions=常量条件
inspection.unused.code=未使用的代码
inspection.non.localized.string=未本地化的字符串
inspection.simplifiable.statement=可简化语句
inspection.simplify=简化 {0}
inspection.replace.enable_if.with.require=将 enable_if 替换为要求
inspection.simplify.condition=简化“condition \=\= true”
inspection.simplify.ternary=简化“condition1 ? true \: condition2”
inspection.not.released.var=版本应在 dealloc 或其任何被调用方中
inspection.works.only.when.clangd.disabled.hint=注意，只有 clangd 关闭时，检查才可以调整
unused.inspection.run.in.headers=在头文件中运行检查
clang.based.inspection.arc.and.properties=ARC 和 @properties
clang.based.inspection.lexical.or.preprocessor.issue=词法或预处理程序问题
clang.based.inspection.api.notes.issue=API 说明问题
clang.based.inspection.openmp.issue=OpenMP 问题
clang.based.inspection.vtable.issue=VTable ABI 问题
clang.based.inspection.coroutines.issue=协同程序问题
open.clangd.settings.link=打开 Clangd 设置