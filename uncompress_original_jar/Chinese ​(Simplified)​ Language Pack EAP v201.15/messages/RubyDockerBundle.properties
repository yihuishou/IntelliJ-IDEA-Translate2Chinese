ruby.docker.compose.sdk.bundle.install.quick.fix.title=运行 'docker-compose build'
ruby.docker.sdk.bundle.install.quickfix.title=运行 'docker build .'
ruby.sdk.bundle.install.quick.display.name=重建 Docker 映像
ruby.sdk.bundle.install.and.docker.build.quick.display.name=在运行的容器中执行 'bundle install' 并重建 Docker 映像
ruby.docker.compose.sdk.precheck.message=正在检查 docker-compose 服务

ruby.docker.no.execution.result=无法执行运行配置

ruby.docker.sdk.downloading=正在下载\: {0}
ruby.docker.run.configuration.settings.pane.title=Docker

ruby.docker.compose.up.project="docker-compose up"
ruby.docker.compose.command.type.run.name=docker-compose run
ruby.docker.compose.command.type.up.name=docker-compose up
ruby.docker.compose.command.type.exec.name=docker-compose exec

configurable.name=Ruby Docker 集成
configurable.internal.command.mode.caption=通过以下方式在 Docker 内与 Ruby 环境进行交互\:
configurable.internal.command.mode.description=要进行分析，需要在 Docker 内部运行 'which ruby'、'gem env' 和 'rbconfig' 等命令
configurable.internal.command.mode.mixed=如果项目已启动，则运行 'docker-compose exec'，否则运行 'docker-compose run'
configurable.internal.command.mode.run='docker-compose run'
configurable.internal.command.mode.sdk.container='docker exec' 位于 SDK 容器中，请根据需要创建 SDK 容器
configurable.internal.command.mode.exec='docker-compose exec'，请根据需要使用 `docker-compose up` 运行项目
configurable.gems.copy.mode.caption=使用以下命令将 Ruby SDK 和 gem 复制到本地缓存\:
configurable.gems.copy.docker.dp.mode.caption='docker cp'
configurable.gems.copy.docker.api.caption=Docker 插件 API
