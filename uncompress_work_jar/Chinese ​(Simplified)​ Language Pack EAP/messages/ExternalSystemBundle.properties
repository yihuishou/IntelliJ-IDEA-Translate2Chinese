# Import.
import.title=重新加载 {0} 项目
import.needed=需要导入 {0} 项目
import.importChanged=重新加载项目变更
import.enableAutoImport=启用自动重新加载
module.type.title={0} 模块
module.type.description={0} 模块用于开发具有由 <b>{0}</b> 管理的依赖关系的<b>JVM-based</b>应用程序。
orphan.modules.dialog.title=孤立模块
orphan.modules.dialog.text=<html>以下模块已从项目中移除。<br/>选择您需要恢复的模块。<html>
orphan.modules.text=下面的 IDE 模块已被 {0} 项目重新加载移除\:<p>{1}</p><br/>您可以<a href\="\#">打开对话框</a>以选择需要恢复的模块。
local.history.remove.orphan.modules=项目重新加载后移除孤立模块

# Settings.
setting.type.location.deduced=推导出 {0} 位置
setting.type.location.unknown={0} 位置未知
setting.type.location.explicit.correct={0} 位置已定义
setting.type.location.explicit.incorrect={0} 位置不正确
settings.label.select.project={0} 项目：
settings.label.project.format=项目格式：
settings.label.use.auto.import=在构建脚本文件更改时自动重新加载此项目

settings.title.projects.settings={0} 个项目
settings.title.system.settings=常规设置

# Progress.
progress.import.text=构建 ''{0}'' {1} 项目信息
progress.refresh.text=导入 ''{0}'' {1} 项目
progress.resolve.libraries=解析 {0} 库
progress.update.text={0}：{1}
progress.update.refresh=导入 {0}

# Errors.
error.project.import.error.title=项目重新加载失败
error.project.does.not.exist=未找到 {0} 脚本文件 ''{1}''
error.project.already.registered=该项目已经注册
error.resolve.with.reason={0}\n\n请参阅 IDE 日志以获取更多详细信息(帮助|显示日志)
error.resolve.already.running=该项目当前正在运行另一个“重新加载项目”任务\:  {0}

# Tool window
tool.window.title.projects=项目
tool.window.title.tasks=任务
external.system.view.nodes.run_configurations.name=运行配置
external.system.view.nodes.dependency_reference_node_tooltip=依赖项已省略(之前已列出)。 <br/>按 Enter 或双击鼠标左键导航至依赖项。

# Action.
action.refresh.all.projects.text=重新加载所有 {0} 项目
action.refresh.all.projects.description=强制重新加载所有链接的 {0} 项目
action.refresh.project.text=重新加载 {0} 项目
action.refresh.project.description=强制重新加载选定的链接 {0} 项目
action.detach.external.project.text=取消链接 {0} 项目
action.detach.external.project.description=取消链接所选项目
action.detach.external.confirmation.prompt={0} {1, choice, 1\#模块|2\#模块} {2} 将取消链接。\n没有文件将被删除。
action.ignore.external.projects.text=忽略 {0} {1,choice,1\#项目|2\#项目}
action.ignore.external.projects.description=忽略所选 {0} {1,choice,1\#项目|2\#项目}
action.unignore.external.projects.text=取消忽略 {0} {1,choice,1\#项目|2\#项目}
action.unignore.external.projects.description=取消忽略所选 {0} {1,choice,1\#项目|2\#项目}
action.open.config.text=打开 {0} 配置
action.open.config.description=在编辑器中打开 {0} 项目文件

action.refresh.project.auto.text=切换自动重新加载模式
action.refresh.project.auto.text.all=启用发生任何更改后自动重新加载
action.refresh.project.auto.text.selective=启用仅在外部更改后自动重新加载
action.refresh.project.auto.text.none=禁用所有变更后自动重新加载
action.refresh.project.auto.description.all=在构建文件发生任何更改后自动重新加载项目
action.refresh.project.auto.description.selective=在 VCS 更新和 IDE 外部发生构建文件更改后自动重新加载项目
action.refresh.project.auto.description.none=在构建文件发生任何更改后不自动重新加载项目

action.open.settings.text={0} 设置
action.open.settings.description=编辑当前项目的 {0} 设置

# Notification
notification.project.refresh.fail.title={0} ''{1}'' 项目重新加载失败
notification.project.build.fail.title={0} ''{1}'' 项目构建失败
notification.messages.project.sync.tab.name={0} 同步
notification.messages.task.execution.tab.name={0} 任务

# Tasks.
tasks.recent.title=最近任务
tasks.all.title=所有任务

external.system.keymap.group=外部构建系统
external.system.task.before.sync=同步前
external.system.task.after.sync=同步后
external.system.task.before.compile=构建之前
external.system.task.after.compile=构建之后
external.system.task.before.rebuild=重新构建之前
external.system.task.after.rebuild=重新构建之后
external.system.task.before.run=运行前
## Tasks UI
external.system.task.activation.title=任务激活
external.system.task.activation.description=编辑 {0} 任务激活设置

# Execution
run.configuration.description={0} 构建
run.configuration.tooltip.choose.registered.project=选择一个已注册的 {0} 项目
run.configuration.title.choose.registered.project=选择 {0} 项目
run.configuration.settings.label.project={0} 项目：
run.configuration.settings.label.tasks=任务：
run.configuration.settings.label.vmoptions=VM 选项：
run.configuration.settings.label.arguments=参数：
run.text.starting.multiple.task={0}：执行任务 {1} ...
run.text.starting.single.task={0}：执行任务 {1} ...
run.text.ended.multiple.task={0}：任务执行完成 {1}。
run.text.ended.single.task={0}：任务执行完成 {1}。
run.error.undefined.task=没有指定执行任务
run.invalid.jvm.agent.configuration=无效的 JVM 代理配置使用 ''{0}''

external.system.java.internal.jre=使用内部 JRE
external.system.java.home.env=使用 JAVA_HOME
external.system.project_jdk.not_specified=未指定项目的 JDK。<a href\=''{0}''>打开项目 SDK 配置</a>
external.system.java.home.undefined=未定义 JAVA_HOME 环境变量
external.system.java.home.invalid=JAVA_HOME 环境变量未指向有效的 JDK 或 JRE({0})
external.system.platform.sdk.invalid=平台 SDK 未指向有效的 JDK({0})

tasks.select.task.title=选择 {0} 任务
tasks.edit.task.title=编辑 {0} 任务
tasks.before.run.empty=运行 {0} 任务
tasks.before.run=运行 {0} 任务 ''{1}''
# Debugger
debugger.status.connected=已连接到由 ''{0}'' {1} 启动的 VM
debugger.open.session.tab=打开调试器会话选项卡

external.system.mavenized.structure.wizard.artifact.coordinates.title=构件坐标

external.system.mavenized.structure.wizard.parent.label=父项\:
external.system.mavenized.structure.wizard.name.label=名称\:
external.system.mavenized.structure.wizard.location.label=位置\:
external.system.mavenized.structure.wizard.group.id.label=GroupId\:
external.system.mavenized.structure.wizard.artifact.id.label=ArtifactId\:
external.system.mavenized.structure.wizard.version.label=版本：

external.system.mavenized.structure.wizard.name.presentation=名称
external.system.mavenized.structure.wizard.location.presentation=位置
external.system.mavenized.structure.wizard.group.id.presentation=groupId
external.system.mavenized.structure.wizard.artifact.id.presentation=artifactId
external.system.mavenized.structure.wizard.version.presentation=版本

external.system.mavenized.structure.wizard.group.id.help=工件组的名称，通常是公司域名
external.system.mavenized.structure.wizard.artifact.id.help=组内构件的名称，通常是 {0} 名称
external.system.mavenized.structure.wizard.version.help=构件版本

external.system.mavenized.structure.wizard.missing.error=缺少 {0} {1}
external.system.mavenized.structure.wizard.directory.not.writable.error=目录不可写
external.system.mavenized.structure.wizard.directory.not.exist.warning=目录不存在
external.system.mavenized.structure.wizard.directory.not.empty.warning=目录不为空
external.system.mavenized.structure.wizard.file.not.directory.error=指定的路径不是目录
external.system.mavenized.structure.wizard.directory.already.taken.error=目录已被项目“{0}”占用

external.system.reload.notification.action.reload.and.conjunction={0}和{1}
external.system.reload.notification.action.reload.text.empty=加载更改
external.system.reload.notification.action.reload.text=加载{0}变更
external.system.reload.notification.action.reload.description.empty=将构建系统变更加载到 {0} 中。
external.system.reload.notification.action.reload.description={0} 项目结构已更改。将变更加载到 {1} 中以使其正常工作。
external.system.reload.notification.action.hide.text=隐藏此通知
0.task.action={0}任务操作
confirmation=确认
delete.0=删除 \"{0}\"?
select.modules.depended.on.currently.selected.modules=选择依赖于当前所选模块的模块
select.required=选择所需项
show.selected.only=仅显示所选项
action.text.unselect.all=取消全选
action.text.select.all=全选
disable.modules.with.dependency.on.this=禁用依赖于此的模块
enable.dependant.modules=启用依赖模块
duplicate.content.roots.detected=检测到重复的内容根
initializing.0.projects.data=正在初始化 {0} 项目数据…
action.text.none=&无

unknown.sdk.type=未知
label.please.select.the.modules.data.to.include.in.the.project=请选择要包含在项目中的模块/数据。
