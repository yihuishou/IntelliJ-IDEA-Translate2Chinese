action.label.text.load.script.configuration=加载脚本配置
action.text.install=安装
action.text.show.kotlin.gradle.dsl.logs.in=在 {0} 中显示 Kotlin Gradle DSL 日志
description.text.a.single.platform.kotlin.library.or.application.targeting.javascript=面向 JavaScript 的单平台 Kotlin 库或应用程序
description.text.a.single.platform.kotlin.library.or.application.targeting.js.for.browser=面向 JavaScript 或浏览器的单平台 Kotlin 库或应用程序
description.text.a.single.platform.kotlin.library.or.application.targeting.js.for.node.js=面向 JavaScript 或 Node.js 的单平台 Kotlin 库或应用程序
description.text.a.single.platform.kotlin.library.or.application.targeting.the.jvm=面向 JVM 的单平台 Kotlin 库或应用程序
description.text.adds.support.for.building.kotlin.projects=添加对构建 Kotlin 项目的支持
description.text.multi.targeted.jvm.js.ios.etc.project.with.shared.code.in.common.modules=具有通用模块中共享代码的多目标 (JVM、JS、iOS 等) 项目。可以在项目的构建脚本中配置这些目标。
description.text.multiplatform.gradle.project.allowing.reuse.of.the.same.kotlin.code.between.android.and.ios.mobile.platforms=多平台 Gradle 项目允许在 Android 与 iOS 移动平台之间重用相同的 Kotlin 代码
description.text.multiplatform.gradle.project.allowing.reuse.of.the.same.kotlin.code.between.js.client.and.jvm.server=多平台 Gradle 项目允许在 JS 客户端与 JVM 服务器之间重用相同的 Kotlin 代码
description.text.multiplatform.gradle.project.allowing.reuse.of.the.same.kotlin.code.between.two.mobile.platforms.jvm.android.and.native=多平台 Gradle 项目允许在两个移动平台 (JVM/Android 和 Native) 之间重用相同的 Kotlin 代码
description.text.multiplatform.jvm.js.native=多平台 Gradle 项目允许在全部三个主要平台 (JVM、JS 和 Native) 之间重用相同的 Kotlin 代码
error.text.cannot.find.build.gradle.file.for.module=找不到模块 {0} 的 build.gradle 文件
error.text.coroutines.support.requires.version.1.1.or.later.of.the.kotlin.runtime.library=协同程序支持需要 1.1 或更高版本的 Kotlin 运行时库。请更新构建脚本中的版本。
error.text.different.kotlin.gradle.version=用于通过 Gradle 构建的 Kotlin 版本 ({0}) 与 IDE 插件中捆绑的版本 ({1}) 不相同
error.text.different.kotlin.library.version=插件版本 ({0}) 与库版本 ({1}) 不相同
error.text.failed.to.load.script.definitions.by=无法通过 {0} 加载脚本定义
error.text.highlighting.is.impossible.during.gradle.import=在 Gradle 导入期间，无法突出显示
error.text.invalid.gradle.libraries.directory=Gradle 库目录 {0} 无效
error.text.missing.jars.in.gradle.directory=Gradle 目录中缺少 jar
error.text.project.isn.t.linked.with.gradle=项目 ''{0}'' 未与 Gradle 链接
error.text.support.requires.version={0}支持需要 {1} 或更高版本的 Kotlin 运行时库。请更新构建脚本中的版本。
error.text.this.language.feature.requires.version=此语言功能需要 {0} 或更高版本的 Kotlin 运行时库。请更新构建脚本中的版本。
error.text.unable.to.get.gradle.home.directory=无法获取 Gradle 主目录
notification.text.native.debug.provides.debugger.for.kotlin.native=Native Debug 为 Kotlin/Native 提供了调试器
presentable.text.java.with.gradle=Java 与 Gradle
presentable.text.javascript.with.gradle=JavaScript 与 Gradle
presentable.text.js.client.and.jvm.server.gradle=JS 客户端和 JVM 服务器 | Gradle
presentable.text.mobile.android.ios.gradle=移动 Android/iOS | Gradle
presentable.text.mobile.shared.library.gradle=移动共享库 | Gradle
presentable.text.multiplatform.library.gradle=多平台库 | Gradle
text.couldn.t.configure.kotlin.gradle.plugin.automatically=无法自动配置 kotlin-gradle 插件。
text.default.kotlin.gradle.script=默认 Kotlin Gradle 脚本
text.gradle.dsl.logs.cannot.be.found.automatically.see.how.to.find.logs=无法自动找到 Gradle DSL 日志。<br/>可以在<a href\="{0}">此处</a>了解如何查找日志。
text.see.manual.installation.instructions=要查看手动安装说明，请点击<a href\="https\://kotlinlang.org/docs/reference/using-gradle.html">此处</a>。
text.the.associated.gradle.project.isn.t.imported=未导入关联的 Gradle 项目。
text.was.modified={0} 已被修改
title.configure.kotlin.gradle.plugin=配置 Kotlin-Gradle 插件
title.kotlin.build.script=Kotlin 构建脚本
title.update.language.version=更新语言版本
tool.tip.text.the.external.gradle.project.needs.to.be.imported.to.get.this.script.analyzed=需要导入外部 Gradle 项目才能分析此脚本。<br/>您可以导入相关的 Gradle 项目，或点击“{0}”，在不导入的情况下获取代码洞察。